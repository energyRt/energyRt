[{"path":[]},{"path":"https://energyRt.org/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://energyRt.org/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://energyRt.org/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://energyRt.org/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://energyRt.org/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://energyRt.org/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://energyRt.org/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://energyRt.org/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://energyRt.org/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://energyRt.org/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://energyRt.org/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://energyRt.org/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to energyRt","title":"Contributing to energyRt","text":"outlines propose change energyRt. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://energyRt.org/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to energyRt","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://energyRt.org/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to energyRt","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://energyRt.org/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to energyRt","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"energyRt/energyRt\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://energyRt.org/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to energyRt","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://energyRt.org/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to energyRt","text":"Please note energyRt project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://energyRt.org/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://energyRt.org/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://energyRt.org/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://energyRt.org/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://energyRt.org/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://energyRt.org/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://energyRt.org/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://energyRt.org/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://energyRt.org/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://energyRt.org/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://energyRt.org/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://energyRt.org/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://energyRt.org/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://energyRt.org/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://energyRt.org/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://energyRt.org/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"https://energyRt.org/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://energyRt.org/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://energyRt.org/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://energyRt.org/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://energyRt.org/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":"https://energyRt.org/articles/utopia.html","id":"intoduction","dir":"Articles","previous_headings":"","what":"Intoduction","title":"Utopia: the testing model","text":"[example model repository fully functional, text parts code might obsolete - update progress] tutorial demonstrates application energyRt package develop Reference Energy System (RES, Energy system optimization) model conduct standard analysis, .e. run scenarios, optimize several alternative development pathways simplified energy system. initial (base-year) structure discussed example RES flexible. following features can easily adjusted: * number regions model GIS-info (map), * model horizon annual time-steps (“milestone years”), * number levels sub-annual time-steps (“time slices”), * technological options, commodities, storage, supply, demand, * interregional trade trade rest world (ROW), * constraints model variables. energyRt package provides set S4 classes, methods, functions design model elements, technologies, commodities, supply, demand, constraints, save model object, process data save format readable solver-software (GAMS, GLPK/Mathprog, Python/Pyomo, Julia/JuMP), run model code solver-software, read results back R, manipulate data produce charts tables. Vignette tutorial can acquired energyRt/vignetts folder (https://github.com/energyRt/energyRt/vignettes). can run step--step reproduce results . Playing parameters data highly recommended learning package RES-models. first beta-version package tutorial. Please report bugs, issues, thoughts : https://github.com/energyRt/energyRt/issues.","code":""},{"path":"https://energyRt.org/articles/utopia.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Utopia: the testing model","text":"assume R (https://www.r-project.org/) RStudio (https://www.rstudio.com/) already installed, scholar basic knowledge R. next step installed energyRt, solver software (GAMS GLPK) LaTeX. detailed installation steps available package website (https://github.com/energyRt/energyRt/).","code":"if (packageVersion(\"energyRt\") < \"0.49.1\") {   stop(\"\\nPlease install the latest version of energyRt package.\\n\",        'devtools::install_github(\"energyRt/energyRt\", ref = \"dev\")')   # devtools::install_github(\"energyRt/energyRt\", ref = \"v0.50\") } library(energyRt) # devtools::load_all(\".\") library(scales) library(sf) library(tidyverse) library(lubridate) library(data.table)  # Set color palette for figures # palette(RColorBrewer::brewer.pal(11, \"Paired\")) palette(RColorBrewer::brewer.pal(11, \"Set3\"))"},{"path":"https://energyRt.org/articles/utopia.html","id":"utopia-map","dir":"Articles","previous_headings":"","what":"Utopia map","title":"Utopia: the testing model","text":"Let’s start multi-region map model. use GIS info imaginary country visualization results also calculate parameters renewables, like solar radiation, distances regions. Several options 11-region map arbitrary GIS info saved energyRt/data folder compared figure .","code":""},{"path":"https://energyRt.org/articles/utopia.html","id":"available-options","dir":"Articles","previous_headings":"Utopia map","what":"Available options","title":"Utopia: the testing model","text":"Certainly, map SpatialPolygonsDataFrame (spdf) format saved names regions @data$region column spdf object can used instead. particular example lets pick utopia_honeycomb map keep 7 first regions simulation.","code":"maps <- names(utopia$map) par_default <- par(no.readonly = TRUE) par(mfrow = c(2, 2), mar = seq(0.1, 4)) for (i in 1:4) {   plot(st_geometry(utopia$map[[i]][\"region\"]),         main = maps[i],         bg = \"aliceblue\",         col = RColorBrewer::brewer.pal(11, \"Set3\"),        key.pos = NULL,         reset = F) } par(par_default) # data(\"utopia_honeycomb\") # , package = \"energyRt\") gis <- utopia$map$honeycomb gis <- gis[1:7,]  # Often used parameters reg_names <- as.character(gis$region); reg_names # Region names nreg <- length(reg_names); nreg # Number of regions"},{"path":"https://energyRt.org/articles/utopia.html","id":"mapping-with-ggplot","dir":"Articles","previous_headings":"Utopia map","what":"Mapping with ggplot","title":"Utopia: the testing model","text":"rely ggplot package figures maps, requires intput data data.frame format, required conversions final map.","code":"ggplot(gis) +   geom_sf(aes(fill = region)) +   # geom_polygon(aes(fill = id), colour = rgb(1, 1, 1, 0.5)) +   # geom_polygon(aes(fill = id), colour = \"white\", size = 1) +   theme(legend.position = \"none\") +   # coord_quickmap() +   theme_void() +   theme(plot.title = element_text(hjust = .5)) +   scale_fill_brewer(palette = \"Set3\") +   labs(fill = \"Region\", title = paste(\"Utopia,\", nrow(gis), \"regions\")) +   geom_text(aes(x, y, label = region), inherit.aes = FALSE)"},{"path":"https://energyRt.org/articles/utopia.html","id":"sub-annual-time-resolution","dir":"Articles","previous_headings":"","what":"Sub-annual time resolution","title":"Utopia: the testing model","text":"examples sub-annual time hierarchy (time-slices slices), one four levels. number levels names flexible (except upper ‘ANNUAL’ level). names levels important, used key-words definition commodities technologies.","code":""},{"path":"https://energyRt.org/articles/utopia.html","id":"annual-default","dir":"Articles","previous_headings":"Sub-annual time resolution","what":"Annual (default)","title":"Utopia: the testing model","text":"models, sub-annual time granularity needed can dropped. also assumed default, slices specified, model annual resolution. Though can also define demonstration time-level structures.","code":"# 1 time slice - ANNUAL timeslices1 <- list(   ANNUAL = \"ANNUAL\" # This level should present in every time-slices structure )"},{"path":"https://energyRt.org/articles/utopia.html","id":"seasons-and-typical-hours","dir":"Articles","previous_headings":"Sub-annual time resolution","what":"Seasons and typical hours","title":"Utopia: the testing model","text":"can add levels - seasons months, weeks, hours. saved nested lists. example seasons (Winter, Summer, spRing, Autumn), hours (Day, Night, Peak). first element list share particular slice level. sum shares level equal one. Four seasons three groups hours result 12 sub-annual time-slices. spring fall similar parameters can aggregated one season, reducing total number slices 9. Though might reasons separate , example, final demand significantly different seasons, resources (like hydro-power) different profile autumn spring.","code":"# 4x3 = 24 slices timeslices2 <- list(   ANNUAL = \"ANNUAL\", # required   # SEASON = c(W = list(1/4,   # For consistency with other structures, lets rename SEASON to MONTH   MONTH = list(     W = list(1 / 4, # share of the Winter season in the year       HOUR = list(         D = 9 / 24, # share of day-hours in Winter         N = 12 / 24, # share of night-hours in Winter         P = 3 / 24       )     ), # share of peak hours in Winter     R = list(1 / 4, # share of the spRing season in the year       HOUR = list(         D = 11 / 24, # share of day-hours in spRing         N = 11 / 24, # share of night-hours in spRing         P = 2 / 24       )     ), # share of peak hours in spRing     S = list(1 / 4, # share of the Summer season in the year       HOUR = list(         D = 12 / 24, # share of day-hours in Summer         N = 9 / 24, # share of night-hours in Summer         P = 3 / 24       )     ), # share of peak hours in Summer)     A = list(1 / 4, # share of the Autumn season in the year       HOUR = list(         D = 11 / 24, # share of day-hours in Autumn         N = 11 / 24, # share of night-hours in Autumn         P = 2 / 24       )     ) # share of peak hours in Autumn)   ) )"},{"path":"https://energyRt.org/articles/utopia.html","id":"months-and-representative-day-hours","dir":"Articles","previous_headings":"Sub-annual time resolution","what":"Months and representative day hours","title":"Utopia: the testing model","text":"probably natural operate real months real hours, easier data perspective. following example 12 months 24 hours month, considering one representative day per month. Therefore result 288 time slices per every year model. However, higher granularity comes computational penalty. Though toy model technologies, level concern yet. disregard differences length months, definition time slices even easier - won’t specify shares, assumed equal model compilation. defined 3 different options sub-annual time steps. first option one level (“ANNUAL”), two others also months (seasons) groups typical hours. following definition model objects rely chosen time structure. example, commodities technologies can higher granularity appear hour-level equations. Whereas others may annual season/month-level time resolution, means appear level balance equations. names slice levels slices consistent across model objects. Therefore time-structure fixed, model-specific. make bit flexible playing alternative specifications, can several time-structure names levels, like lists timeslices2 timeslices3 . “ANNUAL”, “MONTH”, “HOUR” levels. Though names slice-elements different, avoid using model specification. assign time slices model-object later, may also need structure /names slices definition objects, technologies, demand, supply, therefore useful ready.","code":"# 24*1*12 = 288 time slices, two sub-annual levels timeslices3 <- list(   ANNUAL = \"ANNUAL\", # this name is fixed, should not be changes   MONTH = paste0(\"m\", formatC(1:12, width = 2, flag = \"0\")),   HOUR = paste0(\"h\", formatC(0:23, width = 2, flag = \"0\")) ) # timeSlices(timeslices1) # Experimental -- not working yet make_timetable(timeslices2) make_timetable(timeslices3)  # Choose time slices level timeslices <- timeslices2 # timeslices <- timeslices3  slc <- make_timetable(timeslices) (nslc <- length(slc$slice)) (nmon <- length(timeslices$MONTH)) (nhou <- nslc / nmon)"},{"path":"https://energyRt.org/articles/utopia.html","id":"electric-power-sector","dir":"Articles","previous_headings":"","what":"Electric power sector","title":"Utopia: the testing model","text":"Electric generation likely often modeled sector RES. number alternative technological options can evaluated compared RES-models. minimum set model declaration commodities, technologies, supply, demand, basic system parameters, like time-slices, discussed .","code":""},{"path":"https://energyRt.org/articles/utopia.html","id":"commodities","dir":"Articles","previous_headings":"Electric power sector","what":"Commodities","title":"Utopia: the testing model","text":"“commodity” notion model generalization goods, services, emissions. Commodities link processes supply, technologies, demands input output. minimum requirements declare commodity name. Additional parameters can stored class commodity information processing, slots currently reserved used user-defined functions. preferred way create class fill data newCommodity() function shown .","code":"COA <- newCommodity(   name = \"COA\", # the name as it appears in the solver-software and the model sets   desc = \"Generic coal\", # just a comment   emis = list( # emissions, associated with fuels combustion (see the flags in technologies)     comm = \"CO2\", # this commodity (CO2) is emmited when the fuel (COA) is used     unit = \"kt/PJ\", # the unit of emissions for refference     emis = 100 # i.e. 100 kt of CO2 emmitted per one unit of energy (1 PJ)   ),   timeframe = \"ANNUAL\" # 'ANNUAL' means no sub-annual granularity for the commodity   # color = \"brown\" # reserved for output figures, optional )  OIL <- newCommodity(   name = \"OIL\",   desc = \"Oil and oil products\",   emis = list(     comm = \"CO2\",     emis = 80   ),   timeframe = \"ANNUAL\" )  GAS <- newCommodity(   name = \"GAS\",   desc = \"Natural gas\",   emis = list(     comm = \"CO2\",     unit = \"kt/PJ\",     emis = 70   ),   timeframe = \"MONTH\" # This commodity will appear in month-level equations )  CH4 <- newCommodity(   name = \"CH4\",   desc = \"Methan emmisions\",   timeframe = \"MONTH\" )  BIO <- newCommodity(   name = \"BIO\",   desc = \"Generic biomass, all types\",   timeframe = \"ANNUAL\" )  # More energy commodities with less details ELC <- newCommodity(\"ELC\", desc = \"Electricity\", timeframe = \"HOUR\") HVE <- newCommodity(\"HVE\", desc = \"High voltage electricity\", timeframe = \"HOUR\") UHV <- newCommodity(\"UHV\", desc = \"Ultra high voltage electricity\", timeframe = \"HOUR\") NUC <- newCommodity(\"NUC\", desc = \"Nuclear fuel\", timeframe = \"ANNUAL\") HYD <- newCommodity(\"HYD\", desc = \"Hydro energy\", timeframe = \"HOUR\") SOL <- newCommodity(\"SOL\", desc = \"Solar energy\", timeframe = \"HOUR\") WIN <- newCommodity(\"WIN\", desc = \"Wind energy\", timeframe = \"HOUR\")  # Emissions CO2 <- newCommodity(\"CO2\", desc = \"Carbon dioxide emissions\", timeframe = \"HOUR\") NOX <- newCommodity(\"NOX\", desc = \"Nitrogen oxide emissions\", timeframe = \"HOUR\") SO2 <- newCommodity(\"SO2\", desc = \"Sulfur dioxide emissions\", timeframe = \"MONTH\") HG <- newCommodity(\"HG\", desc = \"Mercury emissions\", timeframe = \"HOUR\") PM <- newCommodity(\"PM\", desc = \"Particulate matter emissions\", timeframe = \"ANNUAL\")"},{"path":"https://energyRt.org/articles/utopia.html","id":"the-final-demand","dir":"Articles","previous_headings":"Electric power sector","what":"The final demand","title":"Utopia: the testing model","text":"final product model electricity (ELC), final demand ELC exogenous. Since defined ELC hour-level commodity, specify demand every time slice (load curve) every region consumed. number hours (groups hours) equal time-slices. case ### Demand months hours hours Now let’s specify annual, monthly, hourly demand electricity, assuming every region different level ELC consumptions loadcurve. Instead googling web-scrapping Utopia’s load curve, generate randomly example. demand 2015 done, now need provide projections demand last year model horizon, level granularity (regions * slices) base year, commodity (ELC) . can specify demand every (milestone) year model horizon, . values specified years interpolated model horizon goes beyond last year, final values used interpolation forward.","code":"# Annual demand in 2015 elc_dem_a <- tibble(   region = reg_names,   year = 2015,   GWh = seq(5000, by = 500, length.out = nreg) ) elc_dem_a  fLoadCurve <- function(n = 24, seed = NULL, delt = 24 / n / 20) {   # a function to generate an arbitrary load curve   if (!is.null(seed)) set.seed(seed)   iter <- TRUE   lc <- 1.   for (i in 2:n) {     # ARMA     lc[i] <- 1 * lc[i - 1] + -.1 * (lc[i - 1] - 1) + runif(1, -delt, delt)   }   (0 + lc) * n / sum(lc + 0) }  # Hourly demand for every region set.seed(1) dem <- tibble(   region = rep(reg_names, each = nslc),   year = 2015,   slice = rep(slc$slice, nreg),   GWh = c(sapply(elc_dem_a$GWh, function(x) {     (x * fLoadCurve(nmon)) %x% fLoadCurve(nhou)   })) / nslc ) head(dem) sum(dem$GWh)  # Check by aggregating back to annual numbers dem |>   group_by(region) |>   summarise(GWh_agg = sum(GWh)) |>   mutate(GWh_a = elc_dem_a$GWh)  # Add month and hour for plots # dem$month <- month.abb[as.numeric(substr(dem$slice, 2, 3))] # dem$hour <- as.integer(substr(dem$slice, 6, 7)) dem <- left_join(dem, select(slc, MONTH, HOUR, slice, share), by = \"slice\") |>   rename(month = MONTH) dem$hour <- as.numeric(as.factor(dem$HOUR))  ggplot(dem, aes(hour, GWh)) +   geom_line(aes(color = region)) +   ylim(c(0, NA)) +   facet_wrap(. ~ month) +   theme_bw() +   labs(title = \"(Assumed) Electricity consumption by hours in the base year\") +   theme(plot.title = element_text(hjust = 0.5)) # Adding annual demand for 2030 and 2055 elc_dem_2030 <- dem elc_dem_2030$year <- 2030 elc_dem_2030$GWh <- dem$GWh * 2 # assuming two-fold growth by 2030  elc_dem_2055 <- dem elc_dem_2055$year <- 2055 # The model horizon elc_dem_2055$GWh <- dem$GWh * 3 # and 3-times by 2055  elc_dem <- dem |>   bind_rows(elc_dem_2030) |>   bind_rows(elc_dem_2055)  # The model units in PJ, converting... elc_dem$PJ <- convert(\"GWh\", \"PJ\", elc_dem$GWh) elc_dem$region <- as.character(elc_dem$region)  # a <- (load(\"~/R/energyRt/solwork/UTOPIA_BASE_Julia/data.RData\")) # dat$pDemand |> as.data.table() # scen_BASE_int@modInp@parameters$pDemand@data # scen_BASE_int@modInp@parameters$pDemand@data <- dat$pDemand |>   # as.data.table()  # replace data for banchmarking # elc_dem <- elc_dem |>  #   left_join(select(dat$pDemand, region, year, slice, value)) |> #   mutate(PJ = value) |> select(-value)  DEM_ELC <- newDemand(   name = \"DEM_ELC\",   desc = \"Final demand for electricity\",   commodity = \"ELC\",   dem = list(     year = elc_dem$year,     region = elc_dem$region,     slice = elc_dem$slice,     dem = elc_dem$PJ   ) ) dim(DEM_ELC@dem) unique(DEM_ELC@dem$year) length(unique(DEM_ELC@dem$region)) length(unique(DEM_ELC@dem$slice))"},{"path":"https://energyRt.org/articles/utopia.html","id":"primary-supply","dir":"Articles","previous_headings":"Electric power sector","what":"Primary supply","title":"Utopia: the testing model","text":"Primary commodities, primary energy sources, materials, appear RES-model either export rest world, supply. Neither, supply export ROW capacity per se. main difference origin commodity domestic foreign assume different regions Utopia different resources stimulate trade . Function newSupply creates supply object declared parameters. annual, regional, slice-level limits, well costs, can assigned availability parameters. saved parameter can checked SUP_COA@availability slot: NA values mean “” default columns sets (region, year, slice) “constraint” columns numeric parameters. values specified years linearly interpolated default. Similarly, primary commodities:","code":"# If we assume that coal is abundunt resource, available in every region with the same price, # we don't have to declare @region of the supply. SUP_COA <- newSupply(   name = \"SUP_COA\",   desc = \"Supply of coal\",   commodity = \"COA\",   unit = \"PJ\",   reserve = list(res.up = 1e6), # total limit of the resource (i.e. deposits)   region = reg_names[1],   availability = list(     year = c(2015, 2030, 2050),     ava.up = c(1000, 2000, 1000), # the upper bound on availability of the commodity     cost = c(convert(\"USD/tce\", \"MUSD/PJ\", c(50, 60, 70) * .7)) # assumed price per 1PJ   )   # timeframe = \"ANNUAL\" ) set.seed(100) SUP_GAS <- newSupply(   name = \"SUP_GAS\",   desc = \"Supply of natural gas\",   commodity = \"GAS\",   unit = \"PJ\",   reserve = list(res.up = runif(1, 1e3, 1e6)), #   region = reg_names[min(2, nreg)], # only those regions will have the supply   availability = list(     year = c(2015, 2030, 2050),     ava.up = c(1000, 2000, 1000),     cost = c(convert(\"USD/tce\", \"MUSD/PJ\", c(60, 70, 80) * .7))   )   # timeframe = \"ANNUAL\" )  SUP_NUC <- newSupply(   name = \"SUP_NUC\",   commodity = \"NUC\",   availability = list(     cost = convert(\"USD/MWh\", \"MUSD/PJ\", 4) # assumed   )   # timeframe = \"ANNUAL\" )  RES_HYD <- newSupply(   name = \"RES_HYD\",   commodity = \"HYD\",   availability = data.frame(     ava.up = 1e3,     cost = 0 # no price to the resource, can be dropped   ) )  RES_SOL <- newSupply(   name = \"RES_SOL\",   commodity = \"SOL\"   # availability will be defined by weather factors (see below) )  RES_WIN <- newSupply(   name = \"RES_WIN\",   commodity = \"WIN\"   # availability will be defined by weather factors (see below) )"},{"path":"https://energyRt.org/articles/utopia.html","id":"technologies","dir":"Articles","previous_headings":"Electric power sector","what":"Technologies","title":"Utopia: the testing model","text":"Technologies (techs) key part RES-modeling. topic broad deserves separate tutorial (progress). now, main ideas keep mind: – techs take commodities input generate output; – several levels transformation input output, two main intermediate steps: use activity; – use can seen aggregation inputs various weights one level, comm…","code":""},{"path":"https://energyRt.org/articles/utopia.html","id":"coal-power-plant","dir":"Articles","previous_headings":"Electric power sector > Technologies","what":"Coal power plant","title":"Utopia: the testing model","text":"","code":"# Coal-fired power plants #### ECOA <- newTechnology(   name = \"ECOA\",   desc = \"Generic Coal Power Plant\",   input = list(     comm = \"COA\",     unit = \"PJ\",     combustion = 1   ),   output = list(     comm = \"ELC\",     unit = \"PJ\"   ),    aux = list(     acomm = c(\"HG\", \"NOX\", \"PM\", \"SO2\"),     unit = c(\"t\", \"kt\", \"kt\", \"kt\")   ),   cap2act = 31.536,   ceff = list(     # region = \"R1\",     # year = c(2015),     comm = c(\"COA\"),     cinp2use = c(.4)   ),   aeff = list(     acomm = c(\"HG\", \"NOX\", \"SO2\", \"PM\"),     act2aout = c(0.1, 1.0, 2.0, .2)   ),   afs = list(     slice = \"ANNUAL\",     afs.up = .6   ),   fixom = list(     fixom = 100   ),   invcost = list(     invcost = 1500   ),   capacity = data.frame(     region = c(reg_names, reg_names),     year = c(rep(2015, nreg), rep(2045, nreg)),     stock = c(runif(nreg, 0, 10), rep(0, nreg))   ),   start = list(     start = 2010   ),   olife = list(     olife = 30   ),   timeframe = \"HOUR\" ) draw(ECOA)"},{"path":"https://energyRt.org/articles/utopia.html","id":"gas-power-plant","dir":"Articles","previous_headings":"Electric power sector > Technologies","what":"Gas power plant","title":"Utopia: the testing model","text":"","code":"# Gas-fired power plant #### set.seed(1e3) EGAS <- newTechnology(   name = \"EGAS\",   desc = \"Generic gas Power Plant\",   input = list(     comm = \"GAS\",     unit = \"PJ\",     combustion = 1   ),   output = list(     comm = \"ELC\",     unit = \"PJ\"   ),   aux = list(     acomm = c(\"NOX\", \"CH4\"),     unit = c(\"kt\", \"kt\")   ),   cap2act = 31.536,   ceff = list(     # region = \"R1\",     # year = c(2015),     comm = c(\"GAS\"),     cinp2use = c(.5)   ),   aeff = list(     acomm = c(\"NOX\", \"CH4\"),     act2aout = c(1.5, .1) # arbitrary   ),   afs = list(     slice = \"ANNUAL\",     afs.up = .8   ),   fixom = list(     fixom = 100   ),   invcost = list(     invcost = 1200   ),   capacity = data.frame(     region = c(reg_names, reg_names),     year = c(rep(2015, nreg), rep(2040, nreg)),     stock = c(runif(nreg, .2, 5), rep(0, nreg)) # phasing out   ),   start = list(     start = 2010   ),   olife = list(     olife = 30   ),   timeframe = \"HOUR\" ) draw(EGAS)"},{"path":"https://energyRt.org/articles/utopia.html","id":"biomass-to-power-plant","dir":"Articles","previous_headings":"Electric power sector > Technologies","what":"Biomass-to-power plant","title":"Utopia: the testing model","text":"","code":"# Biomass co-fired power plants #### EBIO <- newTechnology(   name = \"EBIO\",   desc = \"Generic Biomass-fired power plant\",   region = reg_names[min(7, nreg)],   input = list(     comm = \"BIO\",     unit = \"PJ\",     combustion = 1   ),   output = list(     comm = \"ELC\",     unit = \"PJ\"   ),   aux = list(     acomm = c(\"NOX\", \"PM\", \"CH4\"),     unit = c(\"kt\", \"kt\", \"kt\")   ),   cap2act = 31.536,   ceff = list(     comm = c(\"BIO\"),     cinp2use = c(.3)   ),   aeff = list(     acomm = c(\"NOX\", \"PM\", \"CH4\"),     act2aout = c(0.1, 1, .01)   ),   afs = list(     # activity level bounds per sum of listed slices ('ANNUAL')     slice = \"ANNUAL\",     afs.up = .5   ),   fixom = list(     fixom = 50   ),   varom = list(     varom = convert(\"USD/MWh\", \"MUSD/PJ\", .5) # Assumption   ),   invcost = list(     # year = 2015,     invcost = 2000   ),   # # stock = data.frame(   #   region = ,   #   year = ,   #   stock = )   # ),   start = list(     start = 2010   ),   olife = list(     olife = 30   ),   timeframe = \"HOUR\" ) draw(EBIO)"},{"path":"https://energyRt.org/articles/utopia.html","id":"nuclear-power","dir":"Articles","previous_headings":"Electric power sector > Technologies","what":"Nuclear power","title":"Utopia: the testing model","text":"","code":"# Nuclear power plant # ENUC <- newTechnology(   name = \"ENUC\",   desc = \"Nuclear power plants\",   region = reg_names[1],   input = list(     comm = \"NUC\",     unit = \"PJ\"   ),   output = list(     comm = \"ELC\",     unit = \"PJ\"   ),   cap2act = 31.536,   ceff = list(     comm = c(\"NUC\"),     cinp2use = c(.35)   ),   af = list(     af.lo = .8   ),   fixom = list(     fixom = 30   ),   invcost = list(     invcost = convert(\"USD/kW\", \"MUSD/GW\", 3500)   ),   capacity = data.frame(     region = reg_names[1],     year = c(2015, 2060),     stock = 2   ),   start = list(     start = 2010   ),   end = list(     end = 2030   ),   olife = list(     olife = 60   ),   timeframe = \"HOUR\" ) draw(ENUC)"},{"path":"https://energyRt.org/articles/utopia.html","id":"hydro-power","dir":"Articles","previous_headings":"Electric power sector > Technologies","what":"Hydro power","title":"Utopia: the testing model","text":"","code":"EHYD <- newTechnology(   name = \"EHYD\",   desc = \"Hydro power plants\",   input = list(     comm = \"HYD\",     unit = \"PJ\",     combustion = 0   ),   region = reg_names[min(3, nreg)],   output = list(     comm = \"ELC\",     unit = \"PJ\"   ),   cap2act = 31.536,   ceff = list(     comm = c(\"HYD\"),     cinp2use = c(1)   ),   af = list(     af.lo = 0.15   ),   afs = data.frame(     slice = \"ANNUAL\",     afs.up = .4,     afs.lo = .3   ),   fixom = list(     fixom = 61.4   ),   invcost = list(     invcost = 5000   ),   capacity = data.frame(     region = reg_names[min(3, nreg)],     year = c(2015, 2060),     stock = 5   ),   start = list(     start = 2060   ),   olife = list(     olife = 80   ),   timeframe = \"HOUR\" ) draw(EHYD)"},{"path":"https://energyRt.org/articles/utopia.html","id":"weather-factors","dir":"Articles","previous_headings":"Electric power sector > Technologies","what":"Weather factors","title":"Utopia: the testing model","text":"","code":"# The weather information can be obtained from Utopia'a weather agency. # Here we just randomly generate solar and wind availability factors (AF). # For wind we can target, say, 25% annual AF, which can be achieved with # around 35% of the time when the wind is available, and the mean speed of wind # tending to 80% of maximum output capacity of wind plants. # For simplicity, let's disregard seasonal components, spatial # and temporal autocorrelation. #  # Wind availability function rwind <- function(n, sh1 = 5, sh2 = 2, pwind = .35) {   # pwind - probability of wind   rbeta(n, sh1, sh2) * sample(0:1, n, TRUE, c(1 - pwind, pwind)) } # Check mean(rwind(1e5))  # We can use similar approach for clouds, assuming that expected value for # sky transparency is 70%, applying it to solar radiation profile by hours. rclouds <- function(n, sh1 = 3.5, sh2 = 1.5) rbeta(n, sh1, sh2) mean(rclouds(1e5)) hist(rclouds(1e5), col = \"lightblue\", probability = T)  # Solar radiation as function of time slice solrad <- function(slice) {   if (!is.character(slice)) slice <- as.character(slice)   idx <- rep(0, length(slice))   # assuming no difference between months/seasons for sunlight   if_h <- grepl(\"_h\", slice)   if_D <- grepl(\"_D$\", slice)   # browser()   if (any(if_h)) {     # propose function of solar radiation by hours     fsun <- function(h) {       rad <- -cos(2 * pi * (h) / 23)       rad[rad < 0] <- 0       rad     }     # extract hours as numbers from slices of type \"m**_h**\"     h <- as.integer(substr(slice[if_h], 6, 7))     idx[if_h] <- fsun(h)   } else if (any(if_D)) {     idx[if_D] <- 1     # assign some sun for Peak hours     if_P <- grepl(\"_P$\", slice)     idx[if_P] <- .5   } else {     stop(\"unknown slices: \", head(paste(slice, collapse = \", \")))   }   idx }  if (F) { # test   rad <- rbind(slc$slice, solrad(slc$slice))   plot(rad[2, ], type = \"l\", col = \"red\") }  set.seed(1111) WWIN <- newWeather(\"WWIN\",   desc = \"Wind availability factor\",   timeframe = \"HOUR\",   weather = data.frame(     region = rep(reg_names, each = nslc),     year = 2015,     slice = rep(slc$slice, nreg),     wval = rwind(nreg * nslc)   ) )  WSOL <- newWeather(\"WSOL\",   desc = \"Solar radiation index\",   timeframe = \"HOUR\",   weather = data.frame(     region = rep(reg_names, each = nslc),     year = 2015,     slice = rep(slc$slice, nreg),     wval = 0 # assign later   ) ) WSOL@weather$wval <- rclouds(nreg * nslc) * solrad(WSOL@weather$slice) sum(WSOL@weather$wval) / length(WSOL@weather$wval)  if (F) {   plot(WSOL@weather$wval, type = \"l\", col = \"red\")   plot(WWIN@weather$wval, type = \"l\", col = \"red\", xlim = c(1, 24)) }"},{"path":"https://energyRt.org/articles/utopia.html","id":"solar-arrays","dir":"Articles","previous_headings":"Electric power sector > Technologies","what":"Solar arrays","title":"Utopia: the testing model","text":"","code":"ESOL <- newTechnology(   name = \"ESOL\",   desc = \"Solar PV farm\",   input = list(     comm = \"SOL\",     unit = \"PJ\"   ),   output = list(     comm = \"ELC\",     unit = \"PJ\"   ),   cap2act = 31.536,   weather = list(     weather = c(\"WSOL\"),     waf.up = c(1) # * af.s * WSOL@weather$wval   ),   fixom = list(     fixom = 1   ),   invcost = list(     invcost = convert(\"USD/W\", \"MUSD/GW\", 1)   ),   capacity = data.frame(     region = c(reg_names, reg_names),     year = c(rep(2015, nreg), rep(2035, nreg)),     stock = c(runif(nreg, 0, 3), rep(0, nreg))   ),   start = list(     start = 2015   ),   olife = list(     olife = 25   ) ) draw(ESOL)"},{"path":"https://energyRt.org/articles/utopia.html","id":"wind-farms","dir":"Articles","previous_headings":"Electric power sector > Technologies","what":"Wind farms","title":"Utopia: the testing model","text":"","code":"EWIN <- newTechnology(   name = \"EWIN\",   desc = \"Wind power plants\",   input = list(     comm = \"WIN\",     unit = \"PJ\"   ),   output = list(     comm = \"ELC\",     unit = \"PJ\"   ),   cap2act = 31.536,   ceff = list(     comm = c(\"WIN\"),     cinp2use = 1,     afc.up = 1   ),   weather = list(     weather = \"WWIN\",     comm = \"WIN\",     waf.up = 1 #   ),   fixom = list(     fixom = 3   ),   invcost = list(     invcost = 1500   ),   capacity = data.frame(     region = c(reg_names, reg_names),     year = c(rep(2015, nreg), rep(2035, nreg)),     stock = c(runif(nreg, 0, 3), rep(0, nreg))   ),   start = list(     start = 2015   ),   olife = list(     olife = 25   ) ) draw(EWIN)"},{"path":"https://energyRt.org/articles/utopia.html","id":"energy-storage-systems","dir":"Articles","previous_headings":"Electric power sector > Technologies","what":"Energy storage systems","title":"Utopia: the testing model","text":"","code":"STGELC <- newStorage(   name = \"STGELC\",   commodity = \"ELC\",   desc = \"Energy storage systems\",   cap2stg = 1,   olife = list(olife = 10),   invcost = list(     invcost = convert(\"USD/kWh\", \"MUSD/PJ\", 200)   ),   seff = data.frame(     stgeff = .99,     inpeff = .9,     outeff = .95   ) )"},{"path":"https://energyRt.org/articles/utopia.html","id":"interregional-trade","dir":"Articles","previous_headings":"Electric power sector","what":"Interregional trade","title":"Utopia: the testing model","text":"trade basically definition trade routes regions commodity direction. many ways arrange trade routes, growing number regions. define trade neihbor regions, opens flows uninsulated regions. neighbor regions can obtained based GIS info. can visualize open trade routes map. every trade-route, direction, every traded commodity define object class trade open trades model. simplify process, can group trades source regions. Therefore nreg trade objects.","code":"# one of many ways to identify neighbor regions trd_nbr <- sf::st_intersects(sf::st_buffer(gis, .01), gis, sparse = F) trd_nbr[lower.tri(trd_nbr, diag = T)] <- FALSE dimnames(trd_nbr) <- list(reg_names, reg_names) # Data frame of trade routes trd_dt <- trd_nbr |>   as.data.frame.table(stringsAsFactors = F) |>    filter(Freq) |>    distinct() |>   rename(src = 1, dst = 2, trd = 3)  # Map inter-region trade routes reg_centers <- sf::st_drop_geometry(gis) trd_rou <- left_join(trd_dt, reg_centers, by = c(\"src\" = \"region\")) |>   left_join(reg_centers, by = c(\"dst\" = \"region\")) |>   rename(     xsrc = x.x, ysrc = y.x,     xdst = x.y, ydst = y.y   ) |>   as_tibble()  # a <- value trd_flows_map <-   ggplot(data = gis) +   geom_sf(fill = \"wheat\", colour = \"white\", alpha = 1, linewidth = .5   ) + # aes fill = id,   guides(fill = \"none\") + # do this to leave off the color legend   theme_void() +   labs(title = \"Interregional electricity trade routes\") +   theme(     plot.title = element_text(hjust = 0.5),     plot.subtitle = element_text(hjust = 0.5)   ) +   geom_segment(aes(x = xsrc, y = ysrc, xend = xdst, yend = ydst),     data = trd_rou, inherit.aes = FALSE, linewidth = 5,     alpha = 1, colour = \"dodgerblue\", lineend = \"round\", show.legend = T   ) +   geom_point(data = reg_centers, aes(x, y), colour = \"red\") +   geom_segment(aes(x = xsrc, y = ysrc, xend = xdst, yend = ydst),     data = trd_rou, inherit.aes = FALSE, linewidth = .1,     arrow = arrow(       type = \"closed\", angle = 15, ends = \"both\",        length = unit(0.15, \"inches\")     ),     colour = \"white\", alpha = 0.75,     lineend = \"butt\", linejoin = \"mitre\", show.legend = T   ) # , name = \"Trade, PJ\" trd_flows_map"},{"path":"https://energyRt.org/articles/utopia.html","id":"trade","dir":"Articles","previous_headings":"Electric power sector > Interregional trade","what":"Trade","title":"Utopia: the testing model","text":"electric power sector model, can potentially consider trades dispatch, adding various levels voltages, may want add option primary commodities trade regions. simplified demonstration define trade electricity , without consideration different levels voltages, well investments grid. can done adding model technologies, transformers, grid-lines. Though type models don’t details grid simulation models . …","code":"# Define trade losses trd_dt$distance_km <- 0. for (i in 1:dim(trd_dt)[1]) {   # stop()   rg_dst <- trd_dt$dst[i]   rg_src <- trd_dt$src[i]   # lab_dst <- reg_centers[rg_dst, 2:3]   # lab_src <- reg_centers[rg_src, 2:3]   lab_dst <- reg_centers[reg_centers$region == rg_dst, c(\"x\", \"y\")]   lab_src <- reg_centers[reg_centers$region == rg_src, c(\"x\", \"y\")]   trd_dt$distance_km[i] <- st_distance(     st_point(unlist(lab_src)),     st_point(unlist(lab_dst))   ) # no projection is given (\"Utopia!\") units are arbitrary }  # Assume losses 5% per 1000 km trd_dt$losses <- round(trd_dt$distance_km / 1e3 * 0.05, 3) trd_dt$teff <- 1 - trd_dt$losses # Assuming 0.1 US cents per kWh per 1000 km for the transmission trd_dt$cost <- round(trd_dt$distance_km / 1e3 *   convert(\"USD/kWh\", \"MUSD/GWh\", .001), 5) trd_dt <- as_tibble(trd_dt)  # A repository for trades, related technologies and commodities TRBD_ELC <- newRepository(   name = \"TRBD_ELC\",    desc = \"Bidirectional tranmission lines\" ) # Define trade object for each route for (i in 1:nrow(trd_dt)) {   # stop()   # The loop creates trade-objects for every region with neighbors,   # ii <- trd_dt$src %in% src_nm # select routes for the source region   src_nm <- trd_dt$src[i]   dst_nm <- trd_dt$dst[i]    trd_nm <- paste(\"TRBD_ELC\", src_nm, dst_nm, sep = \"_\") # Trade object name   cmd_nm <- \"ELC\"    # Trade class for every route   trd <- newTrade(     name = trd_nm,     desc = paste(\"Bidirectional transmission line between\",                          src_nm, \"and\", dst_nm),     commodity = cmd_nm,     source = c(src_nm, dst_nm),     destination = c(dst_nm, src_nm),     trade = data.frame(       src = c(src_nm, dst_nm),       dst = c(dst_nm, src_nm),       ava.up = convert(\"GWh\", \"PJ\", 100), # Maximum capacity per route in GW       teff = trd_dt$teff[i] # trade losses       # cost = trd_dt$cost[i] # trade costs       # markup = trd_dt$cost[ii] # and/or markup     ),     varom = data.frame(       src = c(src_nm, dst_nm),       dst = c(dst_nm, src_nm),       varom = trd_dt$cost[i] # variable trade costs     ),     fixom = data.frame(       # src = c(src_nm, dst_nm),       # dst = c(dst_nm, src_nm),       fixom = 0.5 # fixed trade costs     ),     capacity = data.frame(       # src = c(src_nm, dst_nm),       # dst = c(dst_nm, src_nm),       stock = 1 # initial capacity     ),     capacityVariable = TRUE, # endogenous trade capacity & investments     invcost = data.frame(       region = c(src_nm, dst_nm),       invcost = trd_dt$distance_km[i] / 1e3 * 250 / 2 # $250 MUSD/1000km     )   )   TRBD_ELC <- add(TRBD_ELC, trd) } names(TRBD_ELC)"},{"path":"https://energyRt.org/articles/utopia.html","id":"global-trade","dir":"Articles","previous_headings":"Electric power sector","what":"Global trade","title":"Utopia: the testing model","text":"","code":"COAIMP <- newImport(   name = \"COAIMP\",   desc = \"Coal import from ROW\",   commodity = \"COA\",   imp = list(     # Let's make it a bit more expensive than domestic coal     year = SUP_COA@availability$year,     price = SUP_COA@availability$cost * 1.2   ) )  GASIMP <- newImport(   name = \"GASIMP\",   desc = \"Natural gas import from ROW\",   commodity = \"GAS\",   imp = list(     # Let's make it a bit more expensive than domestic coal     year = SUP_GAS@availability$year,     price = SUP_GAS@availability$cost * 1.2   ) )  # OILIMP <- newImport( #   name = \"OILIMP\", #   desc = \"Oil import from ROW\", #   commodity = \"OIL\", #   imp = list( #     # Let's make it a bit more expensive than domestic coal #     year = SUP_OIL@availability$year, #     price = SUP_OIL@availability$cost * 1.2 #   ) # )"},{"path":"https://energyRt.org/articles/utopia.html","id":"the-model","dir":"Articles","previous_headings":"Electric power sector","what":"The model","title":"Utopia: the testing model","text":"can check shares time-slices auto-calculated assuming slices weights. works 24 hours, weights every month can specified take difference months length.","code":"repo <- newRepository(\"utopia_repository\") |>    add(     # Commodities     ELC, # electricity     COA, GAS, NUC, HYD, BIO, # energy     WIN, SOL, # renewables     CO2, PM, NOX, SO2, HG, CH4, # emissions     # Supply     SUP_NUC, SUP_COA, SUP_GAS, RES_HYD,     RES_SOL, RES_WIN,     # Import from ROW     COAIMP, GASIMP,     # Technologies     ECOA, EGAS, ENUC, EHYD,     # EWIN, ESOL,     # Electricity trade     TRBD_ELC, # repository with electricity trade routes     DEM_ELC # ELC demand with load curve (24 hours x 12 months)   ) repo length(repo@data) names(repo@data) print(repo)  mdl <- newModel(\"UTOPIA\",   debug = data.frame( # comm = \"ELC\",     dummyImport = 1e6,     dummyExport = 1e6   ),   region = reg_names,   discount = 0.05,   calendar = newCalendar(make_timetable(timeslices)),   repository = repo ) mdl@data |> class() mdl@data"},{"path":"https://energyRt.org/articles/utopia.html","id":"the-model-horizon-and-annual-time-steps-milesone-years","dir":"Articles","previous_headings":"Electric power sector > The model","what":"The model horizon and annual time-steps (milesone years)","title":"Utopia: the testing model","text":"don’t need year--year steps, milestone years (MSY) can specifyed reduce model dimention. function setMilestoneYears takes arguments model start year intervals MSYs, calculates interval years (start end) milestone year.","code":"mdl@config@horizon mdl <- setHorizon(mdl, 2015:2065, c(1, 2, rep(5, 8))) mdl@config@horizon"},{"path":"https://energyRt.org/articles/utopia.html","id":"solver-settings","dir":"Articles","previous_headings":"Electric power sector","what":"Solver settings","title":"Utopia: the testing model","text":"model / scenarios can solved one following mathematical programming languages: * GAMS (General Algebraic Modeling System). * GLPK/MathProg (GNU Linear Programming Kit, MathProg subset AMPL). * Pyomo/Python. * JuMP/Julia language/software (GAMS, GLPK, Python, Julia) must preinstalled required libraries. visible system path, settings required. Otherwise, path executable must specified shown .","code":"# if GAMS is used: set_gams_path(\"PATH\") set_gdxlib_path(\"PATH\") # if GLPK is used: set_glpk_path(\"PATH\") # if Python is used: set_python_path(\"PATH\") # if Julia is used: set_julia_path(\"PATH\")  # The default solver can be set as follows: set_default_solver(solver_options$glpk)  # checks get_gams_path() get_gdxlib_path() get_glpk_path() get_python_path() get_julia_path() get_default_solver() set_progress_bar(\"progress\")"},{"path":[]},{"path":"https://energyRt.org/articles/utopia.html","id":"base-or-reference","dir":"Articles","previous_headings":"Scenarios","what":"“BASE” or “Reference”","title":"Utopia: the testing model","text":"","code":"set_progress_bar(\"progress\") scen_BASE <- solve(mdl, \"BASE\",   solver = solver_options$glpk, # default is used if not specified   tmp.del = FALSE # to keep the solver directory after the run ) summary(scen_BASE) scen_BASE@misc$tmp.dir"},{"path":"https://energyRt.org/articles/utopia.html","id":"solve-with-different-optimization-software-solvers","dir":"Articles","previous_headings":"Scenarios > “BASE” or “Reference”","what":"Solve with different optimization software & solvers","title":"Utopia: the testing model","text":"","code":"# Compare models in different languages scen_BASE_glpk <- solve(mdl,   name = \"BASE_glpk\",   solver = solver_options$glpk,   tmp.del = F ) summary(scen_BASE_glpk)  scen_BASE_gams <- solve(add(mdl),   name = \"BASE_gams\",   solver = solver_options$gams_gdx_cplex,   tmp.del = FALSE ) summary(scen_BASE_gams)  scen_BASE_py <- solve(add(mdl),   name = \"BASE_py\",   solver = solver_options$pyomo_cbc,   tmp.del = F ) summary(scen_BASE_py)  scen_BASE_jl <- solve(add(mdl),   name = \"BASE_jl\",   solver = solver_options$julia_highs,   tmp.del = FALSE ) summary(scen_BASE_jl)  getData(   list(     scen_BASE,     scen_BASE_glpk,     scen_BASE_jl,     scen_BASE_py,     scen_BASE_gams     ),    name = \"vObjective\",    merge = TRUE)"},{"path":"https://energyRt.org/articles/utopia.html","id":"alternative-routine-interpolate-write-solve-read","dir":"Articles","previous_headings":"Scenarios > “BASE” or “Reference”","what":"Alternative routine: interpolate, write, solve, read","title":"Utopia: the testing model","text":"","code":"set_progress_bar(\"bw\")  # Step 1: Interpolation of the model/scenario parameters scen_BASE_int <- interpolate(   mdl,   name = \"BASE\" )  # Step 2: Write the model/scenario script on disk in the selected language scen_BASE_gams <- write_sc(   scen_BASE_int,   solver = solver_options$gams_gdx_cplex ) scen_BASE_gams@misc$tmp.dir # directory  scen_BASE_py <- write_sc(scen_BASE_int,   solver = solver_options$pyomo_ ) scen_BASE_py@misc$tmp.dir  scen_BASE_glpk <- write_sc(scen_BASE_int,   solver = solver_options$glpk )  scen_BASE_jl <- write_sc(scen_BASE_int,   solver = solver_options$julia_highs )  ## Step 3: Solve the model/scenario solve(scen_BASE_gams, wait = F) solve(scen_BASE_py, wait = FALSE) solve(scen_BASE_glpk, wait = FALSE, intern = FALSE) solve(scen_BASE_jl, wait = T)  ## Step 4: Read solution (wait until solved) scen_BASE_gams <- read(scen_BASE_gams) summary(scen_BASE_gams)  scen_BASE_py <- read(scen_BASE_py) summary(scen_BASE_py)  scen_BASE_glpk <- read(scen_BASE_glpk) summary(scen_BASE_glpk)  scen_BASE_jl <- read(scen_BASE_jl) summary(scen_BASE_jl)  getData(list(   GLPK = scen_BASE_glpk,   Julia = scen_BASE_jl,   Python = scen_BASE_py,   GAMS = scen_BASE_gams   ),    name = \"vObjective\", merge = TRUE)"},{"path":"https://energyRt.org/articles/utopia.html","id":"co2-cap","dir":"Articles","previous_headings":"Scenarios","what":"CO2 cap","title":"Utopia: the testing model","text":"Set CO2 cap country tbc…","code":"emis_co2 <- getData(scen_BASE, \"vBalance\", comm = \"CO2\", merge = T) |>   group_by(scenario, comm, year) |>   summarize(value = sum(value, na.rm = T), .groups = \"drop\") emis_co2 emis_co2_2030 <- emis_co2 |> filter(year == 2030)  CO2CAP <- newConstraint(   name = \"CO2CAP\",   eq = \"<=\",   for.each = data.frame(     # region = CO2_cap_national$V1,     year = c(2030:2060),     comm = \"CO2\"   ),   term1 = list(     variable = \"vBalance\"   ),   rhs = data.frame(     year = c(2030, 2060),     rhs = round(emis_co2_2030$value, -3) * c(1, .1)   ),   defVal = Inf ) CO2CAP@rhs CO2CAP@defVal CO2CAP@interpolation  CO2EXP <- newExport(   name = \"CO2EXP\",    desc = \"CO2 price, 'export' if the reduction is not feasible below the price\",   commodity = \"CO2\",    exp = list(price = -10000) )  set_progress_bar(show = T) scen_CO2CAP <- solve_model(   mdl,    name = \"CO2CAP\",   CO2CAP,   CO2EXP,   tmp.del = F,    wait = TRUE ) getHorizon(scen_CO2CAP) summary(scen_CO2CAP) scen_CO2CAP@misc$tmp.dir scen_CO2CAP@model@data[[2]]$CO2CAP scen_CO2CAP@modInp@parameters$pCnsRhsCO2CAP  getData(list(scen_BASE, scen_CO2CAP),          \"vBalance\", comm = \"CO2\", merge = T) |>   group_by(scenario, comm, year) |>   summarize(value = sum(value, na.rm = T))  getData(scen_CO2CAP, \"vEmsFuelTot\", comm = \"CO2\", merge = T) |>   group_by(scenario, comm, year) |>   summarize(value = sum(value, na.rm = T))   getData(scen_CO2CAP, \"vExportRow\", comm = \"CO2\", merge = T)"},{"path":"https://energyRt.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Oleg Lugovoy. Author, maintainer. Vladimir Potashnikov. Author. Tarun Sharma. Contributor.","code":""},{"path":"https://energyRt.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lugovoy O, Potashnikov V (2024). energyRt: Energy systems modeling toolbox R, development version. R package version 0.50.4.9000, https://github.com/energyRt/energyRt, https://energyRt.org.","code":"@Manual{,   title = {energyRt: Energy systems modeling toolbox in R, development version},   author = {Oleg Lugovoy and Vladimir Potashnikov},   year = {2024},   note = {R package version 0.50.4.9000, https://github.com/energyRt/energyRt},   url = {https://energyRt.org}, }"},{"path":"https://energyRt.org/index.html","id":"energyrt-","dir":"","previous_headings":"","what":"energyRt","title":"Energy systems modeling toolbox in R, development version","text":"energyRt (energy system modeling R-toolbox /ˈɛnərdʒi ɑrt/) set classes, methods, functions define macro-language energy system modeling within R environment. package offers high-level, user-friendly interface simplifies development analysis complex energy models. abstracting much underlying complexity, energyRt allows users concentrate strategic analytical aspects rather technical details coding. Key Features: User-Friendly Interface: energyRt enables users define energy systems, input data, configure scenarios using intuitive, domain-specific commands. designed accessible experienced modelers new field. Seamless R Integration: package integrates seamlessly R’s extensive ecosystem packages, allowing users utilize powerful data handling visualization tools within energy modeling projects. energyRt optimization model implemented four widely-used mathematical programming languages, proprietary open-source: GAMS, GLPK/Mathprog, Python/Pyomo, Julia/JuMP. package designed work seamlessly versions, allowing users solve models using preferred software ensuring consistent equivalent results across platforms. Modular Model Construction: energyRt supports construction models modular fashion, enabling incremental development, individual component testing, code reuse across different projects. modularity, combined R’s interactive environment, promotes iterative approach modeling assumptions can tested, results explored real-time. Applications: energyRt designed facilitate creation sophisticated energy system models, offering flexibility depth detailed analysis. essential tool researchers, policymakers, industry professionals engaged long-term energy system planning, energy transition, decarbonization efforts. Documentation progress: https://energyrt.github.io/book/","code":""},{"path":"https://energyRt.org/index.html","id":"development-status","dir":"","previous_headings":"energyRt","what":"Development status","title":"Energy systems modeling toolbox in R, development version","text":"energyRt currently preparation first release publication CRAN. major milestone package version v0.50 (“half-way-”), proof concept full-featured efficient model written four math-prog languages, R-interface model design, processing results, producing reports. version frozen model code, classes methods. updates address potential fixes new features minimal impact already existing modeling projects. development, versions starting v0.9 towards v1.0 fully reviewed model classes goal increase efficiency, reduce memory footprint computational burden model R interface, significantly extend features.","code":""},{"path":"https://energyRt.org/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Energy systems modeling toolbox in R, development version","text":"Assuming R already installed (, please download install https://www.r-project.org/), also recommend RStudio (https://www.rstudio.com/), powerful IDE (Integrated Development Environment) R. installation package done via pak remotes packages: pak::pkg_install(\"energyRt/energyRt@v0.50\") orremotes::install_github(\"energyRt/energyRt\", ref = \"v0.50\") next step install least one solvers: GAMS, GLPK, Python/Pyomo, Julia/JuMP. Please refer respective websites installation instructions. detaileds available IDEEA model website, project based energyRt package.","code":""},{"path":"https://energyRt.org/reference/add.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an object to the model's repository — add,repository-method","title":"Add an object to the model's repository — add,repository-method","text":"Add object model's repository","code":""},{"path":"https://energyRt.org/reference/add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an object to the model's repository — add,repository-method","text":"","code":"# S4 method for class 'repository' add(obj, ..., overwrite = FALSE)  # S4 method for class 'model' add(obj, ..., overwrite = FALSE, repo_name = NULL)  # S4 method for class 'scenario' add(obj, ..., overwrite = FALSE, repo_name = NULL)"},{"path":"https://energyRt.org/reference/add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an object to the model's repository — add,repository-method","text":"obj model objuect ... model elements, allowed classess: ... overwrite logical, TRUE, objects name overwritten, error reported FALSE repo_name character, optional name (sub-)repository add object.","code":""},{"path":"https://energyRt.org/reference/calendar.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a new calendar object from — newCalendar","title":"Generate a new calendar object from — newCalendar","text":"Sub-annual time resolution represented nested, named time-frames time-slices.","code":""},{"path":"https://energyRt.org/reference/calendar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a new calendar object from — newCalendar","text":"","code":"newCalendar(timetable = NULL, year_fraction = 1, ...)  make_timetable(   struct = list(ANNUAL = \"ANNUAL\"),   year_fraction = 1,   warn = FALSE )"},{"path":"https://energyRt.org/reference/calendar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a new calendar object from — newCalendar","text":"timetable data.frame calendar structure. year_fraction numeric scalar, used validation calculation (missing) share column given timetable. default value 1L meaning sum shares slices table equal one (year). Lower one value indicates calendar represents full year. Assigning parameter NULL drop validation. ... optional name, desc, strings, character default_timeframe, list misc relevant content. arguments ignored. struct named list timeframes sets timeslices optional shares every slice frame nest warn logical, TRUE, warning issued ANNUAL level exists given structure. level auto-created complete time-structure.","code":""},{"path":"https://energyRt.org/reference/calendar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a new calendar object from — newCalendar","text":"object class calendar specified structure. data.frame specified structure.","code":""},{"path":"https://energyRt.org/reference/calendar.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Generate a new calendar object from — newCalendar","text":"name character, (optional) name calendar references desc character, (optional) description calendar timeframes named list nested sub-annual levels vectors individual elements. timetable data.frame levels timeframes named columns, number rows equal total number time-slices lowest level. Every timeframe set timeslices (\"slices\") - named fragment time year-share. Timeframes nested structure. Though every slice may different sub-slices (similar real-world calendar). ANNUAL character, annual, top level timeframes TIMEFRAME2 character, (optional) first subannual level timeframes TIMEFRAME3 character, (optional) second subannual level timeframes ... character, (optional) subannual levels timeframes slice character, name time-slices used sets refer lowest level timeframes. specified, auto-created formula: {SLICE2}_{SLICE3}... year_fraction numeric, fraction year covered calendar, e.g. 1 annual calendar (default), 0.5 semi-annual, 0.25 quarterly, etc. specified, calculated sum timetable$share used default value (1). slice_share two column data.frame slices levels individual share year. default_timeframe character, name default level time-slices used model. timeframe_rank named character vector ranks timeframes. slices_in_frame (!!! depreciate) slice_family data.frame mapping \"parent\" \"child\" slices two nearest timeframes nested hierarchy. Autocalculated based @timetable. next_in_timeframe data.frame mapping chronological sequence time-slices timeframe. first timeslice folows last timeframe. Autocalculated based @timetable. next_in_year data.frame mapping chronological sequence time-slices timeframe whole year. Autocalculated based @timetable. misc list additional data calculated mappings.","code":""},{"path":"https://energyRt.org/reference/calendar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a new calendar object from — newCalendar","text":"","code":"newCalendar() #> An object of class \"calendar\" #> Slot \"name\": #> character(0) #>  #> Slot \"desc\": #> character(0) #>  #> Slot \"timeframes\": #> $ANNUAL #> [1] \"ANNUAL\" #>  #>  #> Slot \"year_fraction\": #> [1] 1 #>  #> Slot \"timetable\": #>    ANNUAL  slice share weight #>    <char> <char> <num>  <num> #> 1: ANNUAL ANNUAL     1      1 #>  #> Slot \"slice_share\": #>     slice share weight #>    <char> <num>  <num> #> 1: ANNUAL     1      1 #>  #> Slot \"default_timeframe\": #> [1] \"ANNUAL\" #>  #> Slot \"timeframe_rank\": #> ANNUAL  #>      1  #>  #> Slot \"slices_in_frame\": #> ANNUAL  #>      1  #>  #> Slot \"slice_family\": #> Empty data.table (0 rows and 2 cols): parent,child #>  #> Slot \"slice_ancestry\": #> Empty data.table (0 rows and 2 cols): parent,child #>  #> Slot \"next_in_timeframe\": #> Empty data.table (0 rows and 2 cols): slice,slicep #>  #> Slot \"next_in_year\": #> Empty data.table (0 rows and 2 cols): slice,slicep #>  #> Slot \"misc\": #> list() #>  make_timetable() #>    ANNUAL  slice share weight #>    <char> <char> <num>  <num> #> 1: ANNUAL ANNUAL     1      1 make_timetable(list(\"SEASON\" = c(\"WINTER\", \"SUMMER\"))) #>    ANNUAL SEASON  slice share weight #>    <char> <char> <char> <num>  <num> #> 1: ANNUAL SUMMER SUMMER   0.5      1 #> 2: ANNUAL WINTER WINTER   0.5      1 make_timetable(list(\"SEASON\" = c(\"WINTER\" = .6, \"SUMMER\" = .4))) #>    ANNUAL SEASON  slice share weight #>    <char> <char> <char> <num>  <num> #> 1: ANNUAL SUMMER SUMMER   0.4      1 #> 2: ANNUAL WINTER WINTER   0.6      1 make_timetable(list(   \"SEASON\" = list(     \"WINTER\" = list(.3, DAY = c(\"MORNING\", \"EVENING\")),     \"SUMMER\" = list(.7, DAY = c(\"MORNING\", \"EVENING\"))   ) )) #>    ANNUAL SEASON     DAY          slice share weight #>    <char> <char>  <char>         <char> <num>  <num> #> 1: ANNUAL SUMMER EVENING SUMMER_EVENING  0.35      1 #> 2: ANNUAL SUMMER MORNING SUMMER_MORNING  0.35      1 #> 3: ANNUAL WINTER EVENING WINTER_EVENING  0.15      1 #> 4: ANNUAL WINTER MORNING WINTER_MORNING  0.15      1  make_timetable(list(   \"SEASON\" = list(\"WINTER\" = .3, \"SUMMER\" = .7),   \"DAY\" = c(\"MORNING\", \"EVENING\") )) #>    ANNUAL SEASON     DAY          slice share weight #>    <char> <char>  <char>         <char> <num>  <num> #> 1: ANNUAL SUMMER EVENING SUMMER_EVENING  0.35      1 #> 2: ANNUAL SUMMER MORNING SUMMER_MORNING  0.35      1 #> 3: ANNUAL WINTER EVENING WINTER_EVENING  0.15      1 #> 4: ANNUAL WINTER MORNING WINTER_MORNING  0.15      1"},{"path":"https://energyRt.org/reference/check_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Check validity of object names — check_name","title":"Check validity of object names — check_name","text":"Check validity object names","code":""},{"path":"https://energyRt.org/reference/check_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check validity of object names — check_name","text":"","code":"check_name(x)"},{"path":"https://energyRt.org/reference/check_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check validity of object names — check_name","text":"x character, name object energyRt","code":""},{"path":"https://energyRt.org/reference/check_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check validity of object names — check_name","text":"logical, TRUE name valid.","code":""},{"path":"https://energyRt.org/reference/class-commodity.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent a commodity — commodity-class","title":"An S4 class to represent a commodity — commodity-class","text":"commodity good service produced consumed model. commodity class used store information commodity. processes model operate commodities, .e. either generate, produce, consume, transform, store, transport commodities. creation commodity object done newCommodity function.","code":""},{"path":"https://energyRt.org/reference/class-commodity.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent a commodity — commodity-class","text":"name character. Name commodity. desc character. Optional description commodity reference. limtype factor character. limit type commodity balance equation, \"LO\", \"\", \"FX\". \"LO\" default, meaning level commodity model restricted  lower bound, excess allowed. \"\" means level commodity exceed upper bound. \"FX\" means total commudity supply demand equal, excess deficit allowed. timeframe character. default time-frame commodity operates model. lowest timeframe model used default. unit character. main unit commodity used model. emis data.frame. Emissions factors related commodity consumption  (\"combustion\" parameter technology consumes commodity > 0). comm character. Name emitted commodity. unit character. Unit emission factor. emis numeric. Emission factor, emissions released per unit consumed commodity. agg data.frame. Used define aggregation several commodities name commodity. comm character. Name commodity aggregated. unit character. Unit commodity aggregated. agg numeric. weight commodity aggregation, must set aggregated commodities. misc list. List additional parameters used model can used reference user-defined functions. example, links source commodity data, metadata.","code":""},{"path":"https://energyRt.org/reference/class-constraint.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent a custom constraint. — constraint-class","title":"An S4 class to represent a custom constraint. — constraint-class","text":"Class constraint used define custom constraints optimization problem.","code":""},{"path":[]},{"path":"https://energyRt.org/reference/class-constraint.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent a custom constraint. — constraint-class","text":"name character. Name constraint object, used sets. desc character. Description constraint. eq character. Type relation ('==' default, '<=', '>='). .list. List sets combination constraint created. rhs data.frame. Named list data frame numeric values constraint. dimensions data frame match dimensions sets  .slot. defVal numeric. default value rhs. recommended set default value rhs every constraint avoid unexpected behavior. specified, default value 0, warning issued. interpolation character. Interpolation rule constraint. Recognized values, combination  \"back\", \"inter\", \"forth\", e.g., \"back.inter\" \"forth.inter\", indicating direction interpolation.  default value \"inter\", meaning interpolation done  years specified values. \"back\" \"forth\" values induce backward forward interpolation rhs values, respectively. lhs list. List summands left-hand-side equation.  slot created automatically named unnamed lists passed  newConstraint function, except named arguments. misc list. additional information parameters store constraint object.","code":""},{"path":[]},{"path":"https://energyRt.org/reference/class-demand.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to declare a demand in the model — demand-class","title":"An S4 class to declare a demand in the model — demand-class","text":"S4 class declare demand model","code":""},{"path":"https://energyRt.org/reference/class-demand.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to declare a demand in the model — demand-class","text":"name character. Name demand. desc character. Optional description demand reference. commodity character. Name commodity demand specified. unit character. Optional unit commodity. dem data.frame. Specification demand. region character. Name region demand value. NA every region. year integer. Year demand. NA every year. slice character. Name slice demand value. NA every slice. dem numeric. Value demand. region character. Optional name region narrow specification demand case used NAs.  Error returned specified regions @dem mensioned @region slot  (slot empty). misc list. Optional list additional information.","code":""},{"path":"https://energyRt.org/reference/class-export.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent commodity export to the rest of the world. — export-class","title":"An S4 class to represent commodity export to the rest of the world. — export-class","text":"Export object represent commodity export Rest World (RoW).","code":""},{"path":"https://energyRt.org/reference/class-export.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An S4 class to represent commodity export to the rest of the world. — export-class","text":"export type process adds \"external\" source commodity model. Rest World (RoW) modeled explicitly, export import objects define control exchange RoW. operation export object similar demand objects, two different classes used distinguish domestic external sources final consumption. export controlled exp data frame, specifies bounds fixed values export export flow. exp.fx column used specify fixed values export flow, making export flow exogenous. exp.lo exp.columns used specify lower upper bounds export flow, making export flow endogenous. price column used specify exogenous price export commodity. reserve slot used set limits total export model horizon.","code":""},{"path":"https://energyRt.org/reference/class-export.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent commodity export to the rest of the world. — export-class","text":"name character. Name export object, used sets. desc character. Description export object. commodity character. Name exported commodity. unit character. Unit exported commodity. reserve numeric. Total accumulated limit model horizon. exp data.frame. Export parameters. region character. Region name apply parameter; use NA apply regions. year integer. Year apply parameter; use NA apply years. slice character. Time slice apply parameter; use NA apply slices. exp.lo numeric. Export lower bound. exp.numeric. Export upper bound. exp.fx numeric. Fixed export volume, ignored NA. parameter overrides exp.lo exp.. misc list. Additional information.","code":""},{"path":"https://energyRt.org/reference/class-horizon.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent model/scenario planning horizon with intervals (year-steps) — horizon-class","title":"An S4 class to represent model/scenario planning horizon with intervals (year-steps) — horizon-class","text":"S4 class represent model/scenario planning horizon intervals (year-steps)","code":""},{"path":"https://energyRt.org/reference/class-horizon.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent model/scenario planning horizon with intervals (year-steps) — horizon-class","text":"name character. Name horizon object. Used distinguish different horizons model scenario, including automatic creation folder name model/scenario scripts. desc character. Description horizon object, references. period integer. planning period defined sequence years (arranged, without gaps) model planning (e.g. optimization) window. Data years planning period can present model-objects taken account interpolation model parameters. intervals data.frame. Data frame three columns, representing start, middle, end year every interval. first column start year interval, second column middle year interval, third column end year interval.","code":""},{"path":[]},{"path":"https://energyRt.org/reference/class-import.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent commodity import from the rest of the world. — import-class","title":"An S4 class to represent commodity import from the rest of the world. — import-class","text":"Use newImport create new import object.","code":""},{"path":"https://energyRt.org/reference/class-import.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An S4 class to represent commodity import from the rest of the world. — import-class","text":"Constructor import object. Import object adds \"external\" source commodity model. RoW modeled explicitly region, export import objects define control exchange RoW. operation similar demand object, two ideas distinguishes internal external final consumption. exchange can exogenously defined (imp.fx) optimized model within given limits (imp.lo, imp.). price column used define price imported commodity. \"Reserve\" sets total amount can imported model horizon.","code":""},{"path":"https://energyRt.org/reference/class-import.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent commodity import from the rest of the world. — import-class","text":"name character. Name import object, used sets. desc character. Description import object. commodity character. Name imported commodity. unit character. Unit imported commodity. reserve numeric. Total accumulated limit model horizon. imp data.frame. Import parameters. region character. Region name apply parameter; use NA apply regions. year integer. Year apply parameter; use NA apply years. slice character. Time slice apply parameter; use NA apply slices. imp.lo numeric. Lower bound import volume. imp.numeric. Upper bound import volume. imp.fx numeric. Fixed import volume, ignored NA. parameter overrides imp.lo imp.. misc list. Additional information.","code":""},{"path":"https://energyRt.org/reference/class-repository.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to store the model objects. — repository-class","title":"An S4 class to store the model objects. — repository-class","text":"S4 class store model objects.","code":""},{"path":"https://energyRt.org/reference/class-repository.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to store the model objects. — repository-class","text":"name character. Name repository. desc character. Description repository. data list. Model objects (\"bricks\"), e.g., technologies, constraints, costs, etc.,  stored names keys, gropped named lists. permit character. Vector names classes permitted store repository. default list permitted classes can extended  modified. Used internal functions, common modify slot. misc list. additional data information store object.","code":""},{"path":[]},{"path":"https://energyRt.org/reference/class-storage.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent storage type of technological process. — storage-class","title":"An S4 class to represent storage type of technological process. — storage-class","text":"Storage type technological processes accumulating capacity commodity.","code":""},{"path":"https://energyRt.org/reference/class-storage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An S4 class to represent storage type of technological process. — storage-class","text":"Storage can used combination processes, technologies, supply, demand represent complex technological chains, demand supply technologies time-shift. Operation storage includes accumulation, storing, release stored commodity. storing cycle operates ordered time-slices commodity timeframe. cycle looped either annual basis (last time-slice year follows first time slice year) within parent time-frame (example, commodity time-frame \"HOUR\" parent time-frame \"DAY\" storage cycle calendar day).","code":""},{"path":"https://energyRt.org/reference/class-storage.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent storage type of technological process. — storage-class","text":"name character. Name storage (used sets). desc character. Description storage. commodity character. Name stored commodity. aux data.frame. Auxiliary commodities. acomm character. Name auxiliary commodity (used sets). unit character. Unit auxiliary commodity. region character. Region storage technology exists can installed. start data.frame. Start year storage available installation. region character. Regions storage available investment. start integer. first year storage available investment. end data.frame. Last year storage available investment. region character. Region name apply parameter, NA every region. end integer. last year storage available investment. olife data.frame. Operational life storage technology, applicable new investment ,  operational life (retirement) preexiting capacity described stock slot. region character. Region name apply parameter, NA every region. olife integer. Operational life storage technology years. capacity data.frame. Capacity parameters storage technology. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. cap numeric. Capacity storage technology. cap.lo numeric. Lower bound storage capacity. cap.numeric. Upper bound storage capacity. cap.fx numeric. Fixed value storage capacity. parameter overrides cap.lo cap.. ncap.lo numeric. Lower bound new storage capacity. ncap.numeric. Upper bound new storage capacity. ncap.fx numeric. Fixed value new storage capacity. parameter overrides ncap.lo ncap.. ret.lo numeric. Lower bound storage capacity retirement. ret.numeric. Upper bound storage capacity retirement. ret.fx numeric. Fixed value storage capacity retirement. parameter overrides ret.lo ret.. charge data.frame. Pre-charged level beginning operational cycle. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Time slice charged level specified. charge numeric. Pre-charged targeted level specified slice. seff data.frame. Storage efficiency parameters. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Time slice apply parameter, NA every slice. stgeff numeric. Storage decay annual rate. inpeff numeric. Input efficiency rate. outeff numeric. Output efficiency rate. af data.frame. Availability factor parameters. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Time slice apply parameter, NA every slice. af.lo numeric. Lower bound availability factor. af.numeric. Upper bound availability factor. af.fx numeric. Fixed value availability factor. parameter overrides af.lo af.. cinp.lo numeric. Lower bound input commodity availability factor. cinp.numeric. Upper bound input commodity availability factor. cinp.fx numeric. Fixed value input commodity availability factor. parameter overrides cinp.lo cinp.. cout.lo numeric. Lower bound output commodity availability factor. cout.numeric. Upper bound output commodity availability factor. cout.fx numeric. Fixed value output commodity availability factor.  parameter overrides cout.lo cout.. aeff data.frame. Auxiliary commodities efficiency parameters. acomm character. Name auxiliary commodity (used sets). region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Time slice apply parameter, NA every slice. stg2ainp numeric. Storaage-level--auxiliary-input-commodity coefficient (multiplier). cinp2ainp numeric. Input-commodity--auxiliary-input-commodity coefficient (multiplier). cout2ainp numeric. Output-commodity--auxiliary-input-commodity coefficient (multiplier). stg2aout numeric. Storage-level--auxiliary-output-commodity coefficient (multiplier). cinp2aout numeric. Input-commodity--auxiliary-output-commodity coefficient (multiplier). cout2aout numeric. Output-commodity--auxiliary-output-commodity coefficient (multiplier). cap2ainp numeric. Capacity--auxiliary-input-commodity coefficient (multiplier). cap2aout numeric. Capacity--auxiliary-output-commodity coefficient (multiplier). ncap2ainp numeric. New-capacity--auxiliary-input-commodity coefficient (multiplier). ncap2aout numeric. New-capacity--auxiliary-output-commodity coefficient (multiplier). ncap2stg numeric. New-capacity--storage-level coefficient (multiplier). fixom data.frame. Fixed operation maintenance cost. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. fixom numeric. Fixed operation maintenance cost specified sets. varom data.frame. Variable operation maintenance cost. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Time slice apply parameter, NA every slice. inpcost numeric. Costs associated input commodity. outcost numeric. Costs associated output commodity. stgcost numeric. Costs associated storage level. invcost data.frame. Investment cost. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. invcost numeric. Overnight investment cost specified region year. wacc numeric. Weighted average cost capital. supplied, discount model scenario used. (currently ignored) fullYear logical. TRUE (default), storage technology operates parent timeframes year. last time-slice timeframe used preciding time-slice first time-slice group time-slices within parent timeframe. FALSE, storage charge discchare cycle limited parent timeframe. last time-slice timeframe used preciding time-slice first time-slice group time-slices within parent timeframe. cap2stg numeric. Charging discharging capacity storing capacity inverse ratio. Can used define storage duration. weather data.frame. Weather factors multipliers. weather character. Name weather factor apply. waf.lo numeric. Coefficient links weather factor lower bound availability factor. waf.numeric. Coefficient links weather factor upper bound availability factor. waf.fx numeric. Coefficient links weather factor fixed value availability factor. parameter overrides waf.lo waf.. wcinp.lo numeric. Coefficient links weather factor lower bound input commodity availability factor. wcinp.numeric. Coefficient links weather factor upper bound input commodity availability factor. wcinp.fx numeric. Coefficient links weather factor fixed value input commodity availability factor. parameter overrides wcinp.lo wcinp.. wcout.lo numeric. Coefficient links weather factor lower bound output commodity availability factor. wcout.numeric. Coefficient links weather factor upper bound output commodity availability factor. wcout.fx numeric. Coefficient links weather factor fixed value output commodity availability factor. parameter overrides wcout.lo wcout.. optimizeRetirement logical. Incidates retirement storage optimized. Also requires parameter model scenario class set TRUE effective. misc list. List additional parameters used model can used reference user-defined functions. example, links source storage data, metadata.","code":""},{"path":"https://energyRt.org/reference/class-subsidy.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent a commodity subsidy — subsidy-class","title":"An S4 class to represent a commodity subsidy — subsidy-class","text":"S4 class represent commodity subsidy","code":""},{"path":"https://energyRt.org/reference/class-subsidy.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent a commodity subsidy — subsidy-class","text":"name character. Name subsidy object, used sets. desc character. Description subsidy object. comm character. Name subsidized commodity. region character. Region subsidy applied. defVal numeric. Default value subsidy. sub data.frame. Subsidy values. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Time slice apply parameter, NA every slice. inp numeric. Input subsidy, e.g., per unit commodity consumed processes. numeric. Output subsidy, e.g., per unit commodity produced processes. bal numeric. Balance subsidy, e.g., per unit commodity balance (production - consumption). misc list. additional information data store subsidy object.","code":""},{"path":"https://energyRt.org/reference/class-tax.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent a commodity tax — tax-class","title":"An S4 class to represent a commodity tax — tax-class","text":"S4 class represent commodity tax","code":""},{"path":"https://energyRt.org/reference/class-tax.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent a commodity tax — tax-class","text":"name character. comm character. desc character. region character. year numeric. defVal numeric. value data.frame. misc list.","code":""},{"path":"https://energyRt.org/reference/class-technology.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent technology — technology-class","title":"An S4 class to represent technology — technology-class","text":"Technology technological process model used convert input commodities output commodities consumption production auxiliary commodities linked parameters variables technology. broad set parameters provides flexibility model various technological processes, including efficiency, availability, costs, exogenous shocks (weather factors).","code":""},{"path":"https://energyRt.org/reference/class-technology.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent technology — technology-class","text":"name character. Name technology, used sets. desc character. Optional description technology reference. input data.frame. Main commodities input. Main commodities linked process capacity activity. parameters defined ceff slot. comm character. Name input commodity. unit character. Unit input commodity. group character. Name input-commodities-group. combustion numeric. combustion factor 0 1 (default 1) calculate emissions fuels combustion (commodities intermediate consumption, broadly) output data.frame. Main commodities output. Main commodities linked process capacity activity. parameters defined ceff slot. comm character. Name output commodity. unit character. Unit output commodity. group character. Name output-commodities-group. aux data.frame. Auxilary commodities, input output, parameters defined aeff slot. acomm character. Name auxilary commodity. unit character. Unit auxilary commodity. units data.frame. Key units process activity capacity (reference). capacity character. Unit capacity use character. Unit 'use' (grouped input) applicable. activity character. Unit activity variable technology. costs character. Currency costs variable technology. group data.frame. Details commodity groups defined input output slots (reference). group character. Name group. Must match group names input output slots. desc character. Description group. unit character. Unit group. cap2act numeric. Capacity activity ratio. Default 1. Specifies much product (activity, output commodity identical) produced per unit capacity. geff data.frame. Input-commodity-group efficiency parameters. region character. Name region apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Name slice apply parameter, NA every slice. group character. Name group apply parameter. Required, must match group names input output slots. ginp2use numeric. Group-input--use coefficient, default 1. ceff data.frame. Main commodity activity efficiency parameters. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Name slice apply parameter, NA every slice. comm character. Name commodity apply parameter, different parameters require specification either input output commodity. cinp2use numeric. Commodity-input--use coefficient, default 1. use2cact numeric. Use--commodity-activity coefficient, default 1. cact2cout numeric. Commodity-activity--commodity-output coefficient, default 1. cinp2ginp numeric. Commodity-input--group-input coefficient, default 1. share.lo numeric. Lower bound share commodity within group, default 0. share.numeric. Upper bound share commodity within group, default 1. share.fx numeric. Fixed share commodity within group, ignored NA. parameter overrides share.lo share.. afc.lo numeric. Lower bound physical value commodity, ignored NA. afc.numeric. Upper bound physical value commodity, ignored NA. afc.fx numeric. Fixed physical value commodity, ignored NA. parameter overrides afc.lo afc.. aeff data.frame. Parameters linking main commodities, activities, capacities auxiliary commodities. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Name slice apply parameter, NA every slice. acomm character. Name auxilary commodity apply parameter. cinp2ainp numeric. Main-commodity-input--auxilary-commodity-input coefficient, ignored NA. cinp2aout numeric. Main-commodity-input--auxilary-commodity-output coefficient, ignored NA. cout2ainp numeric. Main-commodity-output--auxilary-commodity-input coefficient, ignored NA. cout2aout numeric. Main-commodity-output--auxilary-commodity-output coefficient, ignored NA. act2ainp numeric. Technology-activity--auxilary-commodity-input coefficient, ignored NA. act2aout numeric. Technology-activity--auxilary-commodity-output coefficient, ignored NA. cap2ainp numeric. Technology-capacity--auxilary-commodity-input coefficient, ignored NA. cap2aout numeric. Technology-capacity--auxilary-commodity-output coefficient, ignored NA. ncap2ainp numeric. Technology-new-capacity--auxilary-commodity-input-coefficient, ignored NA. ncap2aout numeric. Technology-new-capacity--auxilary-commodity-output coefficient, ignored NA. af data.frame. Timeslice-level availability factor parameters. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Name slice apply parameter, NA every slice. af.lo numeric. Lower bound availability factor, default 0. af.numeric. Upper bound availability factor, default 1. af.fx numeric. Fixed availability factor, ignored NA. parameter overrides af.lo af.. rampup numeric. Ramping-time constraint RHS value, ignored NA. Depends technology timeframe. rampdown numeric. Ramping-time constraint RHS value, ignored NA. Depends technology timeframe. afs data.frame. Timeframe-level availability factor constraints. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Name slice apply parameter, required. afs.lo numeric. Lower bound availability factor timeframe, default 0. afs.numeric. Upper bound availability factor timeframe, default 1. afs.fx numeric. Fixed availability factor timeframe, ignored NA. parameter overrides afs.lo afs.. weather data.frame. Parameters linking weather factors (external shocks specified weather class) availability parameters af, afs, afc. weather character. Name applied weather factor, required, must match weather factor names weather class model. comm character. Name commodity specified afc.* affected weather factor, required afc.* parameters specified. wafc.lo numeric. Multiplying coefficient lower bound commodity availability parameter afc.lo, ignored NA. wafc.numeric. Multiplying coefficient upper bound commodity availability parameter afc., ignored NA. wafc.fx numeric. Multiplying coefficient fixed value commodity availability parameter afc.fx, ignored NA. parameter overrides wafc.lo wafc.. waf.lo numeric. Multiplying coefficient lower bound availability factor parameter af.lo, ignored NA. waf.numeric. Multiplying coefficient upper bound availability factor parameter af., ignored NA. waf.fx numeric. Multiplying coefficient fixed value availability factor parameter af.fx, ignored NA. parameter overrides waf.lo waf.. wafs.numeric. Multiplying coefficient upper bound availability factor parameter afs., ignored NA. wafs.lo numeric. Multiplying coefficient lower bound availability factor parameter afs.lo, ignored NA. wafs.fx numeric. Multiplying coefficient fixed value availability factor parameter afs.fx, ignored NA. parameter overrides wafs.lo wafs.. fixom data.frame. Fixed operational maintenance cost (per unit capacity year). region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. fixom numeric. Fixed operational maintenance cost, default 0. varom data.frame. Variable operational maintenance cost (per unit activity commodity). region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Name time-slice (grand-)parent timeframe apply parameter, NA every time-slice technology timeframe. varom numeric. Variable operational maintenance cost per unit activity, default 0. comm character. Name commodity parameter applied, required cvarom parameter. cvarom numeric. Variable operational maintenance cost per unit commodity, default 0. acomm character. Name auxilary commodity avarom applied, required avarom parameter. avarom numeric. Variable operational maintenance cost per unit auxilary commodity, default 0. invcost data.frame. Total overnight investment costs project (per unit capacity). region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. invcost numeric. Total overnight investment costs project (per unit capacity), default 0. wacc numeric. Weighted average cost capital, (currently ignored). start data.frame. first year technology can installed. region character. Region name apply parameter, NA every region. start integer. first year technology can installed, NA means years modeled horizon. end data.frame. last year technology can installed. region character. Region name apply parameter, NA every region. end integer. last year technology can installed, default Inf. olife data.frame. Operational life installed technology (years). region character. Region name apply parameter, NA every region. olife integer. Operational life technology installed optimization, years, default 1. capacity data.frame. Capacity installed technology (units capacity). region character. Region name apply parameter, NA every region. year integer. Year apply parameter, required, values specified years interpolated. stock numeric. Predefined capacity technology units capacity, default 0. parameter also defines exogenous capacity retirement (age-based), exogenous capacity additions, optimized model, included investment costs. cap.lo numeric. Lower bound total capacity (preexisting stock new installations), ignored NA. cap.numeric. Upper bound total capacity (preexisting stock new installations), ignored NA. cap.fx numeric. Fixed total capacity (preexisting stock new installations), ignored NA. parameter overrides cap.lo cap.. ncap.lo numeric. Lower bound new capacity (new installations), ignored NA. ncap.numeric. Upper bound new capacity (new installations), ignored NA. ncap.fx numeric. Fixed new capacity (new installations), ignored NA. parameter overrides ncap.lo ncap.. ret.lo numeric. Lower bound capacity retirement (age-based), ignored NA. ret.numeric. Upper bound capacity retirement (age-based), ignored NA. ret.fx numeric. Fixed capacity retirement (age-based), ignored NA. parameter overrides ret.lo ret.. optimizeRetirement logical. Incidates retirement technology optimized. Also requires parameter model scenario class set TRUE effective. fullYear logical. Incidates technology operating full-year basis. Used storages. currently ignored technologies. timeframe character. Name timeframe level technology operating. default, lowest level timeframe commodities used technology applied. region character. Vector regions technology exists can installed. Optional. specified, technology applied regions. specified, must include regions used slots. misc list. List additional parameters used model can used reference user-defined functions. example, links source technology data, metadata.","code":""},{"path":"https://energyRt.org/reference/class-weather.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 class to represent weather factors — weather-class","title":"S4 class to represent weather factors — weather-class","text":"weather data-carrying class exogenous shocks used influence operation processes model.","code":""},{"path":"https://energyRt.org/reference/class-weather.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"S4 class to represent weather factors — weather-class","text":"Weather factors separated model parameters can added replaced different scenarios. !!!Additional details...","code":""},{"path":"https://energyRt.org/reference/class-weather.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"S4 class to represent weather factors — weather-class","text":"name character. Name weather factor, used sets. desc character. Description weather factor. unit character. Unit weather factor. region character. Region weather factor applied. timeframe character. Timeframe weather factor. defVal numeric. Default value weather factor, 0 default. weather data.frame. Weather factor values. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Time slice apply parameter, NA every slice. wval numeric. Weather factor value. misc list. Additional information.","code":""},{"path":"https://energyRt.org/reference/commodity.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent a commodity — commodity-class","title":"An S4 class to represent a commodity — commodity-class","text":"S4 class represent commodity Create class commodity","code":""},{"path":"https://energyRt.org/reference/commodity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An S4 class to represent a commodity — commodity-class","text":"","code":"newCommodity(   name = \"\",   desc = \"\",   limtype = \"LO\",   timeframe = character(),   unit = character(),   agg = data.frame(),   emis = data.frame(),   misc = list() )"},{"path":"https://energyRt.org/reference/commodity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An S4 class to represent a commodity — commodity-class","text":"name character, short name used sets, white spaces special characters desc character, description commodity limtype character factor, limit type commodity balance equation (\"LO\" default, meaning level commodity model satisfied lower bound) timeframe character, default time-frame commodity operates model (lowest timeframe used default) unit character, physical unit commodity used model, currently information . agg data.frame, commodity aggregation several commodities, data.frame contains aggregation parameters listed commodities name commodity. emis data.frame, emission factors commodity, commodity consumed technology combustion parameter > 0, listed slot commodities emitted. misc list, list miscellaneous information store. #'","code":""},{"path":"https://energyRt.org/reference/commodity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An S4 class to represent a commodity — commodity-class","text":"commodity object","code":""},{"path":"https://energyRt.org/reference/commodity.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent a commodity — commodity-class","text":"name character, short name used sets, white spaces special characters limtype, character factor, limit type commodity balance equation (\"LO\" default, meaning level commodity model satisfied lower bound) timeframe character, default time-frame commodity operates model (lowest timeframe used default) unit main unit commodity used model, character string emis data.frame emissions factors, columns: comm character string, name commodity unit character string, unit emission factor emis numeric, emission factor, applied consumed commodity (@name) technology combustion parameter > 0, calculate emissions commodity specified slot (@emis$comm). agg data.frame aggregation parameters several commodities @name commodity, columns: comm character string, name commodity aggregated unit numeric, unit commodity aggregated agg numeric, aggregation parameter, applied commodity specified slot (@agg$comm) calculate @name commodity. misc list miscellaneous information store desc","code":""},{"path":"https://energyRt.org/reference/commodity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An S4 class to represent a commodity — commodity-class","text":"","code":"newCommodity(name = \"ELC\", desc = \"Electricity\") #> An object of class \"commodity\" #> Slot \"name\": #> [1] \"ELC\" #>  #> Slot \"desc\": #> [1] \"\" #>  #> Slot \"limtype\": #> [1] LO #> Levels: FX UP LO #>  #> Slot \"timeframe\": #> character(0) #>  #> Slot \"unit\": #> character(0) #>  #> Slot \"emis\": #> [1] comm unit emis #> <0 rows> (or 0-length row.names) #>  #> Slot \"agg\": #> [1] comm unit agg  #> <0 rows> (or 0-length row.names) #>  #> Slot \"misc\": #> list() #>"},{"path":"https://energyRt.org/reference/config-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class (S4) to represent default model configuration. — config-class","title":"Class (S4) to represent default model configuration. — config-class","text":"Class (S4) represent default model configuration.","code":""},{"path":"https://energyRt.org/reference/config-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class (S4) to represent default model configuration. — config-class","text":"desc character string configuration information. region character coma separated string region names model horizon class horizon model time parameters discount data frame discount rates region year discountFirstYear logical, TRUE, discounting starts beginning year optimizeRetirement currently ignored defVal data.frame default values parameters (energyRt:::.defVal) interpolation data.frame interpolation rules (energyRt:::.defInt) debug data.frame define artificial (dummy) variables debug model infeasibility misc list miscelaneous data store object.","code":""},{"path":"https://energyRt.org/reference/constraint-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class 'constraint' — constraint-class","title":"Class 'constraint' — constraint-class","text":"Class 'constraint'","code":""},{"path":"https://energyRt.org/reference/constraint-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class 'constraint' — constraint-class","text":"name character. Name constrain object (used GAMS, GLPK, etc. element sets). desc character. Description constraint. eq factor. Type relation ('==' default, '<=', '>='). .list. List sets constraint created. rhs data.frame. List data frame numeric values constraint. defVal numeric. default value rhs. interpolation character, interpolation rule constraint. Recognized values, combination \"back\", \"inter\", \"forth\", indicating direction interpolation. default value \"inter\". lhs list. List summands left-hand side equation. slot created automatically unnamed arguments passed newConstraint function. misc list. List additional information parameters store constraint object.","code":""},{"path":"https://energyRt.org/reference/convert.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert units — convert,character-method","title":"Convert units — convert,character-method","text":"Convert units Add units convert function","code":""},{"path":"https://energyRt.org/reference/convert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert units — convert,character-method","text":"","code":"# S4 method for class 'character' convert(from, to, x = 1, database = \"base\", ...)  # S4 method for class 'numeric' convert(x = 1, from, to, database = \"base\", ...)  # S4 method for class 'character,character,numeric' add_to_convert(   type,   unit,   coef,   alias = \"\",   SI_prefixes = FALSE,   database = \"base\",   update = TRUE )"},{"path":"https://energyRt.org/reference/convert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert units — convert,character-method","text":"character length one unit name character length one unit name x numeric vector data convert database character name database units (base default, options implemented yet). ... currently ignored type character, type unit (one \"Energy\", \"Power\", \"Mass\", \"Time\", \"Length\", \"Area\", \"Pressure\", \"Density\", \"Volume\", \"Flow Rates\", \"Currency\"). unit character, name new unit add database. coef numeric, convert factor base unit type (see first column convert_data[[database]][[type]]). alias character vector, alternative name(s) unit. SI_prefixes logical, can used SI prefixes, FALSE default.","code":""},{"path":"https://energyRt.org/reference/convert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert units — convert,character-method","text":"numeric vector converted values updated convert_data .GlobalEnv, values update package data.","code":""},{"path":"https://energyRt.org/reference/convert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert units — convert,character-method","text":"","code":"convert(\"MWh\", \"kWh\") #> [1] 1000 convert(\"kWh\", \"MJ\") #> [1] 3.6 convert(\"kWh/kg\", \"MJ/t\", 1e-3) #> [1] 3.6 convert(\"cents/kWh\", \"USD/MWh\") #> [1] 10 convert(1000, \"kWh\", \"MWh\") #> [1] 1 convert(\"kWh\", \"MJ\") #> [1] 3.6 convert(1, \"kWh/kg\", \"MJ/t\") #> [1] 3600 convert(5, \"cents/kWh\", \"USD/MWh\") #> [1] 50 ## Not run: convert_data$base$Currency #>             USD cents mills       RMB EUR  cr. ₹   cr.₹ crore ₹ crore INR #> coef          1  0.01 0.001 0.1398601 1.1 121000 121000  121000    121000 #> SI_prefixes   1  0.00 0.000 1.0000000 1.0      0      0       0         0 #>             INR (in cr.)    INR      ₹ crore_INR cr.INR cr. INR   € Euro #> coef              121000 0.0121 0.0121    121000 121000  121000 1.1  1.1 #> SI_prefixes            0 1.0000 1.0000         0      0       0 1.0  1.0 #>                     JPY Japanese yen         JP¥          円       CNY #> coef        0.007142857  0.007142857 0.007142857 0.007142857 0.1398601 #> SI_prefixes 1.000000000  1.000000000 1.000000000 1.000000000 1.0000000 #>             Chinese yuan       CN¥        元 #> coef           0.1398601 0.1398601 0.1398601 #> SI_prefixes    1.0000000 1.0000000 1.0000000 add_to_convert(\"Currency\", unit = \"JPY\", coef = 140) convert_data$base$Currency #>             USD cents mills       RMB EUR  cr. ₹   cr.₹ crore ₹ crore INR #> coef          1  0.01 0.001 0.1398601 1.1 121000 121000  121000    121000 #> SI_prefixes   1  0.00 0.000 1.0000000 1.0      0      0       0         0 #>             INR (in cr.)    INR      ₹ crore_INR cr.INR cr. INR   € Euro JPY #> coef              121000 0.0121 0.0121    121000 121000  121000 1.1  1.1 140 #> SI_prefixes            0 1.0000 1.0000         0      0       0 1.0  1.0   0 #>             Japanese yen         JP¥          円       CNY Chinese yuan #> coef         0.007142857 0.007142857 0.007142857 0.1398601    0.1398601 #> SI_prefixes  1.000000000 1.000000000 1.000000000 1.0000000    1.0000000 #>                   CN¥        元 #> coef        0.1398601 0.1398601 #> SI_prefixes 1.0000000 1.0000000 ## End(Not run)"},{"path":"https://energyRt.org/reference/convert_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic units conversion database for convert methods — convert_data","title":"Basic units conversion database for convert methods — convert_data","text":"Basic units conversion database convert methods","code":""},{"path":"https://energyRt.org/reference/convert_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic units conversion database for convert methods — convert_data","text":"","code":"convert_data"},{"path":"https://energyRt.org/reference/convert_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Basic units conversion database for convert methods — convert_data","text":"object class list length 1.","code":""},{"path":"https://energyRt.org/reference/costs-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class 'costs' — costs-class","title":"Class 'costs' — costs-class","text":"Class 'costs'","code":""},{"path":"https://energyRt.org/reference/costs-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class 'costs' — costs-class","text":"name character. desc character. variable character. subset data.frame. mult data.frame. misc list.","code":""},{"path":"https://energyRt.org/reference/demand.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to declare a demand in the model — newDemand","title":"An S4 class to declare a demand in the model — newDemand","text":"S4 class declare demand model","code":""},{"path":"https://energyRt.org/reference/demand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An S4 class to declare a demand in the model — newDemand","text":"","code":"newDemand(   name = \"\",   desc = character(),   commodity = character(),   unit = character(),   dem = data.frame(),   region = character(),   misc = list() )"},{"path":"https://energyRt.org/reference/demand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An S4 class to declare a demand in the model — newDemand","text":"demand object given specifications.","code":""},{"path":"https://energyRt.org/reference/demand.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to declare a demand in the model — newDemand","text":"name short name (character) used sets. desc optional desc, comment (character). commodity character. Name commodity demand specified. unit character. (optional) unit commodity. dem specification demand, data.frame columns: region character. Name region demand specified. NA every regions year integer. Year demand. NA every year. slice character. Name slice demand specified. NA every slice. dem numeric. Value demand. region character. Optional name region narrow specification demand case used NAs. Error returned specified regions @dem mensioned @region slot (slot empty). misc list. Optional list additional information.","code":""},{"path":"https://energyRt.org/reference/demand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An S4 class to declare a demand in the model — newDemand","text":"","code":"DSTEEL <- newDemand(  name = \"DSTEEL\",  desc = \"Steel demand\",  commodity = \"STEEL\",  unit = \"Mt\",  dem = data.frame(     region = \"UTOPIA\", # NA for every region     year = c(2020, 2030, 2050),     slice = \"ANNUAL\",     dem = c(100, 200, 300)  ),  region = \"UTOPIA\", # optional, to narrow the specification of the demand  )"},{"path":"https://energyRt.org/reference/draw.html","id":null,"dir":"Reference","previous_headings":"","what":"Schematic representation of technology — draw.technology","title":"Schematic representation of technology — draw.technology","text":"Schematic representation technology","code":""},{"path":"https://energyRt.org/reference/draw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Schematic representation of technology — draw.technology","text":"","code":"draw.technology(   tech,   year = NULL,   region = NULL,   slice = NULL,   ARROW_FONT = NULL,   CEX_GREFF = 0.65,   act_col = \"red3\",   aux_col = \"royalblue3\",   ncomb_col = \"seagreen3\",   bbcol1 = \"lightblue\",   bbcol2 = \"white\",   sng_lwd = 4,   grp_lwd = 2,   rule = new(\"config\")@interpolation,   defVal = new(\"config\")@defVal,   show_all = TRUE )"},{"path":"https://energyRt.org/reference/draw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Schematic representation of technology — draw.technology","text":"tech . show_all","code":""},{"path":"https://energyRt.org/reference/drop_na_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop columns in a data.frame with only NA values — drop_na_cols","title":"Drop columns in a data.frame with only NA values — drop_na_cols","text":"wrapper dplyr functions drop columns information (NA values)","code":""},{"path":"https://energyRt.org/reference/drop_na_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop columns in a data.frame with only NA values — drop_na_cols","text":"","code":"drop_na_cols(x, unique = TRUE)"},{"path":"https://energyRt.org/reference/drop_na_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop columns in a data.frame with only NA values — drop_na_cols","text":"x data.frame unique logical, TRUE (default), unique() function applied result.","code":""},{"path":"https://energyRt.org/reference/en_install_julia_pkgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Install Julia packages — en_install_julia_pkgs","title":"Install Julia packages — en_install_julia_pkgs","text":"Install Julia packages","code":""},{"path":"https://energyRt.org/reference/en_install_julia_pkgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install Julia packages — en_install_julia_pkgs","text":"","code":"en_install_julia_pkgs(pkgs = NULL, update = FALSE)"},{"path":"https://energyRt.org/reference/en_install_julia_pkgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install Julia packages — en_install_julia_pkgs","text":"pkgs character vector Julia packages install. default c(\"JuMP\", \"HiGHS\", \"Cbc\", \"Clp\", \"RData\", \"RCall\", \"CodecBzip2\",  \"Gadfly\", \"DataFrames\", \"CSV\", \"SQLite\", \"Dates\"). pre-installed CPLEX Gurobi, can add list.","code":""},{"path":"https://energyRt.org/reference/en_install_julia_pkgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install Julia packages — en_install_julia_pkgs","text":"NULL completion successful. verification installation done user function en_check_julia().","code":""},{"path":"https://energyRt.org/reference/energyRt-package.html","id":null,"dir":"Reference","previous_headings":"","what":"energyRt: Energy systems modeling toolbox in R, development version — energyRt-package","title":"energyRt: Energy systems modeling toolbox in R, development version — energyRt-package","text":"Energy systems modeling toolbox R","code":""},{"path":[]},{"path":"https://energyRt.org/reference/energyRt-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"energyRt: Energy systems modeling toolbox in R, development version — energyRt-package","text":"Maintainer: Oleg Lugovoy olugovoy@optimalsolution.dev (ORCID) Authors: Vladimir Potashnikov potashnikov.vu@gmail.com contributors: Tarun Sharma tarunsharma@ms.iitr.ac.(ORCID) [contributor]","code":""},{"path":"https://energyRt.org/reference/export-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent commodity export to the rest of the world. — export-class","title":"An S4 class to represent commodity export to the rest of the world. — export-class","text":"S4 class represent commodity export rest world.","code":""},{"path":"https://energyRt.org/reference/export-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent commodity export to the rest of the world. — export-class","text":"name character. Name export process (used sets). desc character. short description export process. commodity character. Name commodity. unit character. Unit exported commodity. reserve numeric. Constraints total accumulated (years) export resource (similar \"reserve\" supply). misc list. additional information store.","code":""},{"path":"https://energyRt.org/reference/findData.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs search for available data in scenario object. — findData","title":"Performs search for available data in scenario object. — findData","text":"Performs search available data scenario object.","code":""},{"path":"https://energyRt.org/reference/findData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs search for available data in scenario object. — findData","text":"","code":"findData(   scen,   dataType = c(\"parameters\", \"variables\"),   setsNames_ = NULL,   valueColumn = TRUE,   allSets = TRUE,   ignore.case = FALSE,   add_weights = \"auto\",   dropEmpty = TRUE,   dfDim = TRUE,   dfNames = TRUE,   asMatrix = FALSE )"},{"path":"https://energyRt.org/reference/findData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs search for available data in scenario object. — findData","text":"scen object scenario model solution. dataType type data lok (currently \"parameters\" \"variables\"). setsNames_ regular expression pattern names sets included search. valueColumn logical, TRUE return variables parameters 'value' column (filter sets mappings). allSets logical, TRUE operator used search sets, used FALSE. ignore.case grepl parameter matching names. dropEmpty logical, TRUE drops parameters variables zero length. dfDim logical, TRUE returns dimension dim. dfNames logical, TRUE returns names data frame column. asMatrix return results matrix (implemented).","code":""},{"path":"https://energyRt.org/reference/findData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs search for available data in scenario object. — findData","text":"list variables parameters name, includes dim names character vectors.","code":""},{"path":"https://energyRt.org/reference/findDuplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to find duplicated values in interpolated scenario. — findDuplicates","title":"Function to find duplicated values in interpolated scenario. — findDuplicates","text":"Function find duplicated values interpolated scenario.","code":""},{"path":"https://energyRt.org/reference/findDuplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to find duplicated values in interpolated scenario. — findDuplicates","text":"","code":"findDuplicates(x)"},{"path":"https://energyRt.org/reference/findDuplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to find duplicated values in interpolated scenario. — findDuplicates","text":"x scenario data.frame data check.","code":""},{"path":"https://energyRt.org/reference/gams.html","id":null,"dir":"Reference","previous_headings":"","what":"Set GAMS and GDX library directory — set_gams_path","title":"Set GAMS and GDX library directory — set_gams_path","text":"(optional) function sets path GAMS directory R-options. might useful cases several different version (licenses) GAMS installed, easily switch . also possible set different path GAMS GAMS Data Exchange (GDX) libraries. GDX path set, GAMS path used. GAMS path set, default system GAMS-path (OS environment variables) instead.","code":""},{"path":"https://energyRt.org/reference/gams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set GAMS and GDX library directory — set_gams_path","text":"","code":"set_gams_path(path = NULL)  get_gams_path()  set_gdxlib_path(path = NULL)  get_gdxlib_path()"},{"path":"https://energyRt.org/reference/gams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set GAMS and GDX library directory — set_gams_path","text":"path character, path installed GAMS distribution use solve models /GDX library use reading writing gdx-files.","code":""},{"path":"https://energyRt.org/reference/gams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set GAMS and GDX library directory — set_gams_path","text":"","code":"# set_gams_path(\"C:/GAMS/win64/32.2/\")  # get_gams_path() # set_gdxlib(\"C:/GAMS/35\") # get_gdxlib()"},{"path":"https://energyRt.org/reference/getData.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts information from scenario objects, based on filters. — getData","title":"Extracts information from scenario objects, based on filters. — getData","text":"Extracts information scenario objects, based filters.","code":""},{"path":"https://energyRt.org/reference/getData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts information from scenario objects, based on filters. — getData","text":"","code":"getData(   scen,   name = NULL,   ...,   merge = FALSE,   process = FALSE,   parameters = TRUE,   variables = TRUE,   ignore.case = TRUE,   newNames = NULL,   newValues = NULL,   na.rm = FALSE,   digits = NULL,   drop.zeros = FALSE,   asTibble = TRUE,   stringsAsFactors = FALSE,   yearsAsFactors = FALSE,   drop_duplicated_scenarios = TRUE,   scenNameInList = as.logical(length(scen) - 1),   verbose = FALSE )  get_data(   scen,   name = NULL,   ...,   merge = FALSE,   process = FALSE,   parameters = TRUE,   variables = TRUE,   ignore.case = TRUE,   newNames = NULL,   newValues = NULL,   na.rm = FALSE,   digits = NULL,   drop.zeros = FALSE,   asTibble = TRUE,   stringsAsFactors = FALSE,   yearsAsFactors = FALSE,   drop_duplicated_scenarios = TRUE,   scenNameInList = as.logical(length(scen) - 1),   verbose = FALSE )"},{"path":"https://energyRt.org/reference/getData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts information from scenario objects, based on filters. — getData","text":"scen Object scenario list scenarios. name character vector names parameters /variables. ... filters various sets (setname = c(val1, val2) setname_ = \"matching pattern\"), see details. merge TRUE, search results merged one dataframe; named list returned FALSE. process TRUE, dimensions \"tech\", \"stg\", \"trade\", \"imp\", \"expp\", \"dem\", \"sup\" renamed \"process\". parameters TRUE, parameters included search returned found. variables TRUE, variables included search returned found. ignore.case grepl parameter regular expressions used '...' 'name_'. newNames renaming sets, named character vector list new names values, old names names - input parameter renameSets function. operation performed merging data (merge parameter). newValues revalue sets, named character vector list new values values, old values names - input parameter revalueSets function. operation performed merging data (merge parameter). na.rm TRUE, NA values dropped. digits integer, indicates number decimal places rounding, NULL - actions. drop.zeros logical, rows containing zero values filtered . asTibble logical, data.frames converted tibbles. stringsAsFactors logical, sets values converted factors? yearsAsFactors logical, year converted factors? Set 'year' integer default. scenNameInList logical, name scenarios used provided list several scenarios? verbose","code":""},{"path":"https://energyRt.org/reference/getData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts information from scenario objects, based on filters. — getData","text":"","code":"if (FALSE) { # \\dontrun{ data(\"utopia_scen_BAU.RData\") getData(scen, name = \"pDemand\", year = 2015, merge = T) getData(scen, name = \"vTechOut\", comm = \"ELC\", merge = T, year = 2015) elc2050 <- getData(scen, parameters = FALSE, comm = \"ELC\", year = 2050) names(elc2050) elc2050$vBalance } # }"},{"path":"https://energyRt.org/reference/get_registry.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the current registry object. — get_registry","title":"Returns the current registry object. — get_registry","text":"Returns current registry object.","code":""},{"path":"https://energyRt.org/reference/get_registry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the current registry object. — get_registry","text":"","code":"get_registry()"},{"path":"https://energyRt.org/reference/get_registry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the current registry object. — get_registry","text":"current registry object.","code":""},{"path":"https://energyRt.org/reference/get_slot_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve slot details in rd-format — get_slot_info","title":"Retrieve slot details in rd-format — get_slot_info","text":"Retrieve slot details rd-format","code":""},{"path":"https://energyRt.org/reference/get_slot_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve slot details in rd-format — get_slot_info","text":"","code":"get_slot_info(class_name = \"technology\", slot_name = \"ceff\", col_names = TRUE)"},{"path":"https://energyRt.org/reference/get_slot_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve slot details in rd-format — get_slot_info","text":"class_name character, name class. slot_name character, name slot retrieve. col_names logical, columns information returned data.frame slots.","code":""},{"path":"https://energyRt.org/reference/get_slot_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve slot details in rd-format — get_slot_info","text":"character, roxygen2 formatted string slot details.","code":""},{"path":"https://energyRt.org/reference/get_slot_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve slot details in rd-format — get_slot_info","text":"","code":"slotNames(\"technology\") #>  [1] \"name\"               \"desc\"               \"input\"              #>  [4] \"output\"             \"aux\"                \"units\"              #>  [7] \"group\"              \"cap2act\"            \"geff\"               #> [10] \"ceff\"               \"aeff\"               \"af\"                 #> [13] \"afs\"                \"weather\"            \"fixom\"              #> [16] \"varom\"              \"invcost\"            \"start\"              #> [19] \"end\"                \"olife\"              \"capacity\"           #> [22] \"optimizeRetirement\" \"fullYear\"           \"timeframe\"          #> [25] \"region\"             \"misc\"               get_slot_info(\"technology\", \"input\") |> cat() #> data.frame. Main commodities input. Main commodities are linked to the process capacity and activity. Their parameters are defined in the `ceff` slot. #>   \\describe{ #>     \\item{comm}{character. Name of the input commodity.} #>     \\item{unit}{character. Unit of the input commodity.} #>     \\item{group}{character. Name of input-commodities-group.} #>     \\item{combustion}{numeric. combustion factor from 0 to 1 (default 1) to calculate emissions from fuels combustion (commodities intermediate consumption, more broadly) #> } #>  } get_slot_info(\"technology\", \"capacity\") |> cat() #> data.frame. Capacity of the installed technology (in units of capacity). #>   \\describe{ #>     \\item{region}{character. Region name to apply the parameter, NA for every region.} #>     \\item{year}{integer. Year to apply the parameter, required, values between specified years will be interpolated.} #>     \\item{stock}{numeric. Predefined capacity of the technology in units of capacity, default is 0. This parameter also defines the exogenous capacity retirement (age-based), or exogenous capacity additions, not optimized by the model, and not included in investment costs. #> } #>     \\item{cap.lo}{numeric. Lower bound on the total capacity (preexisting stock and new installations), ignored if NA.} #>     \\item{cap.up}{numeric. Upper bound on the total capacity (preexisting stock and new installations), ignored if NA.} #>     \\item{cap.fx}{numeric. Fixed total capacity (preexisting stock and new installations), ignored if NA. This parameter overrides `cap.lo` and `cap.up`.} #>     \\item{ncap.lo}{numeric. Lower bound on the new capacity (new installations), ignored if NA.} #>     \\item{ncap.up}{numeric. Upper bound on the new capacity (new installations), ignored if NA.} #>     \\item{ncap.fx}{numeric. Fixed new capacity (new installations), ignored if NA. This parameter overrides `ncap.lo` and `ncap.up`.} #>     \\item{ret.lo}{numeric. Lower bound on the capacity retirement (age-based), ignored if NA.} #>     \\item{ret.up}{numeric. Upper bound on the capacity retirement (age-based), ignored if NA.} #>     \\item{ret.fx}{numeric. Fixed capacity retirement (age-based), ignored if NA. This parameter overrides `ret.lo` and `ret.up`.} #>  } get_slot_info(\"demand\", \"dem\") |> cat() #> data.frame. Specification of the demand. #>   \\describe{ #>     \\item{region}{character. Name of region for the demand value. NA for every region.} #>     \\item{year}{integer. Year of the demand. NA for every year.} #>     \\item{slice}{character. Name of the slice for the demand value. NA for every slice.} #>     \\item{dem}{numeric. Value of the demand.} #>  } get_slot_info(\"commodity\", \"agg\") |> cat() #> data.frame. Used to define an aggregation of several commodities into the `name` commodity. #>  #>   \\describe{ #>     \\item{comm}{character. Name of a commodity being aggregated.} #>     \\item{unit}{character. Unit of the commodity being aggregated.} #>     \\item{agg}{numeric. weight of the commodity in the aggregation, must be set for all aggregated commodities. #> } #>  }"},{"path":"https://energyRt.org/reference/horizon.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent model/scenario planning horizon with intervals (year-steps) — horizon-class","title":"An S4 class to represent model/scenario planning horizon with intervals (year-steps) — horizon-class","text":"S4 class represent model/scenario planning horizon intervals (year-steps) Create new object class 'horizon'","code":""},{"path":"https://energyRt.org/reference/horizon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An S4 class to represent model/scenario planning horizon with intervals (year-steps) — horizon-class","text":"","code":"newHorizon(   period = NULL,   intervals = NULL,   mid_is_end = FALSE,   mid_is_start = FALSE,   force_BY_interval_to_1_year = T,   desc = NULL,   name = NULL,   ... )"},{"path":"https://energyRt.org/reference/horizon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An S4 class to represent model/scenario planning horizon with intervals (year-steps) — horizon-class","text":"period (optional) integer vector range sequence period; arranged, gaps filled. missing intervals (optional) data.frame integer vector. data.frame must start, mid, end columns modeled interval. vector considered lengths modeled interval period. force_BY_interval_to_1_year logical, TRUE (default), base-year (first) interval forced one year. desc character, comment description. ... ignored","code":""},{"path":"https://energyRt.org/reference/horizon.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent model/scenario planning horizon with intervals (year-steps) — horizon-class","text":"desc character, comment short description. period integer, planning period defined sequence years (arranged, without gaps) model planning (e.g. optimization) window. Data years planning period can present model-objects taken account interpolation model parameters. excluded optimization. intervals data.frame three columns, representing start, middle, end year every interval.","code":""},{"path":"https://energyRt.org/reference/horizon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An S4 class to represent model/scenario planning horizon with intervals (year-steps) — horizon-class","text":"","code":"newHorizon(2020:2050) #> An object of class \"horizon\" #> Slot \"name\": #> character(0) #>  #> Slot \"desc\": #> character(0) #>  #> Slot \"period\": #>  [1] 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 #> [16] 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 #> [31] 2050 #>  #> Slot \"intervals\": #>     start   mid   end #>     <int> <int> <int> #>  1:  2020  2020  2020 #>  2:  2021  2021  2021 #>  3:  2022  2022  2022 #>  4:  2023  2023  2023 #>  5:  2024  2024  2024 #>  6:  2025  2025  2025 #>  7:  2026  2026  2026 #>  8:  2027  2027  2027 #>  9:  2028  2028  2028 #> 10:  2029  2029  2029 #> 11:  2030  2030  2030 #> 12:  2031  2031  2031 #> 13:  2032  2032  2032 #> 14:  2033  2033  2033 #> 15:  2034  2034  2034 #> 16:  2035  2035  2035 #> 17:  2036  2036  2036 #> 18:  2037  2037  2037 #> 19:  2038  2038  2038 #> 20:  2039  2039  2039 #> 21:  2040  2040  2040 #> 22:  2041  2041  2041 #> 23:  2042  2042  2042 #> 24:  2043  2043  2043 #> 25:  2044  2044  2044 #> 26:  2045  2045  2045 #> 27:  2046  2046  2046 #> 28:  2047  2047  2047 #> 29:  2048  2048  2048 #> 30:  2049  2049  2049 #> 31:  2050  2050  2050 #>     start   mid   end #>  newHorizon(2020:2030, desc = \"One-year intervals\") #> An object of class \"horizon\" #> Slot \"name\": #> character(0) #>  #> Slot \"desc\": #> [1] \"One-year intervals\" #>  #> Slot \"period\": #>  [1] 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 #>  #> Slot \"intervals\": #>     start   mid   end #>     <int> <int> <int> #>  1:  2020  2020  2020 #>  2:  2021  2021  2021 #>  3:  2022  2022  2022 #>  4:  2023  2023  2023 #>  5:  2024  2024  2024 #>  6:  2025  2025  2025 #>  7:  2026  2026  2026 #>  8:  2027  2027  2027 #>  9:  2028  2028  2028 #> 10:  2029  2029  2029 #> 11:  2030  2030  2030 #>  newHorizon(2020:2030, c(1, 2, 5, 10), desc = \"Different length intervals\") #> An object of class \"horizon\" #> Slot \"name\": #> character(0) #>  #> Slot \"desc\": #> [1] \"Different length intervals\" #>  #> Slot \"period\": #>  [1] 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 #>  #> Slot \"intervals\": #>    start   mid   end #>    <num> <num> <num> #> 1:  2020  2020  2020 #> 2:  2021  2021  2022 #> 3:  2023  2025  2027 #> 4:  2028  2028  2030 #>  newHorizon(2020:2035, c(1, 2, 5, 5, 5)) #> An object of class \"horizon\" #> Slot \"name\": #> character(0) #>  #> Slot \"desc\": #> character(0) #>  #> Slot \"period\": #>  [1] 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 #> [16] 2035 #>  #> Slot \"intervals\": #>    start   mid   end #>    <num> <num> <num> #> 1:  2020  2020  2020 #> 2:  2021  2021  2022 #> 3:  2023  2025  2027 #> 4:  2028  2030  2032 #> 5:  2033  2033  2035 #>  newHorizon(2020:2050, c(1, 2, 5, 7, 1)) #> An object of class \"horizon\" #> Slot \"name\": #> character(0) #>  #> Slot \"desc\": #> character(0) #>  #> Slot \"period\": #>  [1] 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 #> [16] 2035 #>  #> Slot \"intervals\": #>    start   mid   end #>    <num> <num> <num> #> 1:  2020  2020  2020 #> 2:  2021  2021  2022 #> 3:  2023  2025  2027 #> 4:  2028  2031  2034 #> 5:  2035  2035  2035 #>  newHorizon(intervals = data.frame(   start = c(2030, 2031, 2034),   mid =   c(2030, 2032, 2037),   end =   c(2030, 2033, 2040)),   desc = \"Explicit assignment of intervals via data.frame\"   ) #> An object of class \"horizon\" #> Slot \"name\": #> character(0) #>  #> Slot \"desc\": #> [1] \"Explicit assignment of intervals via data.frame\" #>  #> Slot \"period\": #>  [1] 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 #>  #> Slot \"intervals\": #>    start   mid   end #>    <num> <num> <num> #> 1:  2030  2030  2030 #> 2:  2031  2032  2033 #> 3:  2034  2037  2040 #>   newHorizon(period = 2020:2050,            intervals = data.frame(              start = c(2030, 2031, 2034),              mid =   c(2030, 2032, 2037),              end =   c(2030, 2033, 2040)),              desc = \"The period will be trimmed to the scope of intervals\") #> An object of class \"horizon\" #> Slot \"name\": #> character(0) #>  #> Slot \"desc\": #> [1] \"The period will be trimmed to the scope of intervals\" #>  #> Slot \"period\": #>  [1] 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 #>  #> Slot \"intervals\": #>    start   mid   end #>    <num> <num> <num> #> 1:  2030  2030  2030 #> 2:  2031  2032  2033 #> 3:  2034  2037  2040 #>   newHorizon(2020:2050, c(3, 2, 5, 10),            desc = \"Pay attention to the length of the first interval\") #> An object of class \"horizon\" #> Slot \"name\": #> character(0) #>  #> Slot \"desc\": #> [1] \"Pay attention to the length of the first interval\" #>  #> Slot \"period\": #>  [1] 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 #> [16] 2035 2036 2037 2038 2039 #>  #> Slot \"intervals\": #>    start   mid   end #>    <num> <num> <num> #> 1:  2020  2020  2020 #> 2:  2021  2021  2022 #> 3:  2023  2023  2024 #> 4:  2025  2027  2029 #> 5:  2030  2034  2039 #>   newHorizon(period = 2020:2040,            intervals = data.frame(              start = c(2030, 2032, 2035),              mid =   c(2031, 2033, 2037),              end =   c(2032, 2034, 2040))) #> An object of class \"horizon\" #> Slot \"name\": #> character(0) #>  #> Slot \"desc\": #> character(0) #>  #> Slot \"period\": #>  [1] 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 #>  #> Slot \"intervals\": #>    start   mid   end #>    <int> <int> <int> #> 1:  2030  2030  2030 #> 2:  2031  2031  2032 #> 3:  2032  2033  2034 #> 4:  2035  2037  2040 #>"},{"path":"https://energyRt.org/reference/hour2HOUR.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert hours (integer) values to HOUR set 'hNN' — hour2HOUR","title":"Convert hours (integer) values to HOUR set 'hNN' — hour2HOUR","text":"Convert hours (integer) values HOUR set 'hNN'","code":""},{"path":"https://energyRt.org/reference/hour2HOUR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert hours (integer) values to HOUR set 'hNN' — hour2HOUR","text":"","code":"hour2HOUR(x, width = 2, prefix = \"h\", flag = \"0\")"},{"path":"https://energyRt.org/reference/hour2HOUR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert hours (integer) values to HOUR set 'hNN' — hour2HOUR","text":"flag","code":""},{"path":"https://energyRt.org/reference/import-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent commodity import from the rest of the world. — import-class","title":"An S4 class to represent commodity import from the rest of the world. — import-class","text":"S4 class represent commodity import rest world.","code":""},{"path":"https://energyRt.org/reference/import-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent commodity import from the rest of the world. — import-class","text":"name character. desc character. commodity character. unit character. reserve numeric. imp data.frame. misc list.","code":""},{"path":"https://energyRt.org/reference/interpolate-model-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate model — interpolate,model-method","title":"Interpolate model — interpolate,model-method","text":"Interpolate model","code":""},{"path":"https://energyRt.org/reference/interpolate-model-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate model — interpolate,model-method","text":"","code":"# S4 method for class 'model' interpolate(object, ...)"},{"path":"https://energyRt.org/reference/interpolate-model-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate model — interpolate,model-method","text":"object model scenario type object.","code":""},{"path":"https://energyRt.org/reference/interpolate-model-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate model — interpolate,model-method","text":"scenario object enclosed model (slot @model) interpolated parameters (slot @modInp).","code":""},{"path":"https://energyRt.org/reference/isInMemory.html","id":null,"dir":"Reference","previous_headings":"","what":"Is object stored in memory? — isInMemory","title":"Is object stored in memory? — isInMemory","text":"object stored memory?","code":""},{"path":"https://energyRt.org/reference/isInMemory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is object stored in memory? — isInMemory","text":"","code":"isInMemory(obj)"},{"path":"https://energyRt.org/reference/isInMemory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is object stored in memory? — isInMemory","text":"obj Object, checks","code":""},{"path":"https://energyRt.org/reference/load_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Load scenario (in progress) — load_scenario","title":"Load scenario (in progress) — load_scenario","text":"Load scenario (progress)","code":""},{"path":"https://energyRt.org/reference/load_scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load scenario (in progress) — load_scenario","text":"","code":"load_scenario(   path,   name = NULL,   env = .scen,   overwrite = FALSE,   ignore_errors = FALSE,   verbose = TRUE )"},{"path":"https://energyRt.org/reference/load_scenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load scenario (in progress) — load_scenario","text":"verbose","code":""},{"path":"https://energyRt.org/reference/make_scenario_dirname.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a name for a scenario directory — make_scenario_dirname","title":"Make a name for a scenario directory — make_scenario_dirname","text":"function automate creation scenario directory name. Used internally solve*() interpolate*() functions. Also can used amend name scenario directory explicitly assign directory name save scenario object.","code":""},{"path":"https://energyRt.org/reference/make_scenario_dirname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a name for a scenario directory — make_scenario_dirname","text":"","code":"make_scenario_dirname(   scen,   name = scen@name,   model_name = scen@model@name,   calendar_name = scen@settings@calendar@name,   horizon_name = scen@settings@horizon@name,   prefix = NULL,   suffix = NULL,   sep = \"_\" )"},{"path":"https://energyRt.org/reference/make_scenario_dirname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a name for a scenario directory — make_scenario_dirname","text":"scen scenario object name character, name scenario, default scen@name model_name character, name model, default scen@model@name calendar_name character, name calendar, default scen@settings@calendar@name horizon_name character, name horizon, default scen@settings@horizon@name prefix character, prefix add name suffix character, suffix add name sep character, separator, default _","code":""},{"path":"https://energyRt.org/reference/make_scenario_dirname.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a name for a scenario directory — make_scenario_dirname","text":"character, name scenario directory","code":""},{"path":"https://energyRt.org/reference/modInp-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent model input — modInp-class","title":"An S4 class to represent model input — modInp-class","text":"S4 class represent model input","code":""},{"path":"https://energyRt.org/reference/modInp-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent model input — modInp-class","text":"set list. parameters list. gams.equation list. costs.equation character misc list.","code":""},{"path":"https://energyRt.org/reference/modOut-class.html","id":null,"dir":"Reference","previous_headings":"","what":"modOut-class to store the output from the model (solution) — modOut-class","title":"modOut-class to store the output from the model (solution) — modOut-class","text":"modOut-class store output model (solution)","code":""},{"path":"https://energyRt.org/reference/modOut-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"modOut-class to store the output from the model (solution) — modOut-class","text":"sets list. variables list. stage character. # !!! move scenario-status solutionLogs data.frame. misc list.","code":""},{"path":"https://energyRt.org/reference/model-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 class to represent model — model-class","title":"S4 class to represent model — model-class","text":"S4 class represent model","code":""},{"path":"https://energyRt.org/reference/model-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"S4 class to represent model — model-class","text":"name character. desc character. data list. config config. misc list.","code":""},{"path":"https://energyRt.org/reference/newConstraint.html","id":null,"dir":"Reference","previous_headings":"","what":"Create constraint object to add custom constraints to the model. — newConstraint","title":"Create constraint object to add custom constraints to the model. — newConstraint","text":"function creates new constraint object can used add custom constraints model.","code":""},{"path":"https://energyRt.org/reference/newConstraint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create constraint object to add custom constraints to the model. — newConstraint","text":"","code":"newConstraint(   name,   desc = \"\",   ...,   eq = \"==\",   for.each = NULL,   rhs = data.frame(),   defVal = NULL,   interpolation = \"inter\",   replace_zerros = 1e-20 )  isConstraint(object)  addSummand(eqt, variable = NULL, mult = data.frame(), for.sum = list(), arg)"},{"path":"https://energyRt.org/reference/newConstraint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create constraint object to add custom constraints to the model. — newConstraint","text":"name character. Name constraint object, used sets. desc character. Description constraint. ... named unnamed list(s) left-hand side (LHS) linear terms (summands) define constraint. Every summand defined list following elements: variable - name variable summand. mult - multiplier variable summand. .sum - list sets summand defined. summands can passed named unnamed lists. added lhs slot constraint object linear terms mulipliers variables. eq Type relation ('==' default, '<=', '>=') .list data.frame sets define dimension constraint. rhs numeric value, list data frame sets numeric values constraint. Note: zero values replaced replace_zerros avoid dropping interpolation algorithms. defVal numeric. default value rhs. recommended set default value rhs every constraint avoid unexpected behavior. specified, default value 0, warning issued. interpolation character. Interpolation rule constraint. Recognized values, combination  \"back\", \"inter\", \"forth\", e.g., \"back.inter\" \"forth.inter\", indicating direction interpolation.  default value \"inter\", meaning interpolation done  years specified values. \"back\" \"forth\" values induce backward forward interpolation rhs values, respectively. replace_zerros numeric value replace zero values rhs defVal. Default 1e-20. object R object","code":""},{"path":"https://energyRt.org/reference/newConstraint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create constraint object to add custom constraints to the model. — newConstraint","text":"Object class constraint. TRUE object inherits class constraint, FALSE otherwise.","code":""},{"path":"https://energyRt.org/reference/newConstraint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create constraint object to add custom constraints to the model. — newConstraint","text":"Custom constraints extend functionality model adding user-defined constraints optimization problem. predefined constraints sufficient describe problem, custom constraints can used add linear equlity inequality constraints define additional relationships variables. many cases can done without writing constraints GAMS, Julia/JuMP, Python/Pyomo, GLPK-MathProg languages using constrant class newConstraint function. define custom constraint newConstraint function, user needs specify name constraint, type relation (equality, less equal, greater equal), left-hand side (LHS) terms statement, right-hand side (RHS) value. dimension constraint set .parameter. 'lhs' terms defined list linear terms (summands). summand consists variable, multiplier, set sets summand defined.","code":""},{"path":"https://energyRt.org/reference/newConstraint.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Create constraint object to add custom constraints to the model. — newConstraint","text":"isConstraint(): Check object constraint. addSummand():","code":""},{"path":[]},{"path":"https://energyRt.org/reference/newConstraint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create constraint object to add custom constraints to the model. — newConstraint","text":"","code":"isConstraint(1) #> [1] FALSE isConstraint(newConstraint(\"\")) #> It is advisable to define 'defVal' parameter. #> Warning: Zero value in 'defVal' will be replaced with '1e-20' to avoid ignoring it by the current interpolation algorithms. Use non-zero value to avoid auto-replacement and the warning. Use 'replace_zerros = NULL' to avoid replacement. #> Error in newConstraint(\"\"): object 'arg' not found"},{"path":"https://energyRt.org/reference/newDemand.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new demand object — newDemand","title":"Create new demand object — newDemand","text":"Create new demand object Update data demand object","code":""},{"path":"https://energyRt.org/reference/newDemand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new demand object — newDemand","text":"","code":"newDemand(   name = \"\",   desc = character(),   commodity = character(),   unit = character(),   dem = data.frame(),   region = character(),   misc = list() )  # S4 method for class 'demand' update(object, ...)"},{"path":"https://energyRt.org/reference/newDemand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new demand object — newDemand","text":"name character. Name demand. desc character. Optional description demand reference. commodity character. Name commodity demand specified. unit character. Optional unit commodity. dem data.frame. Specification demand. region character. Name region demand value. NA every region. year integer. Year demand. NA every year. slice character. Name slice demand value. NA every slice. dem numeric. Value demand. region character. Optional name region narrow specification demand case used NAs.  Error returned specified regions @dem mensioned @region slot  (slot empty). misc list. Optional list additional information. object demand object","code":""},{"path":"https://energyRt.org/reference/newDemand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create new demand object — newDemand","text":"demand object given specifications.","code":""},{"path":"https://energyRt.org/reference/newDemand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create new demand object — newDemand","text":"","code":"DSTEEL <- newDemand(  name = \"DSTEEL\",  desc = \"Steel demand\",  commodity = \"STEEL\",  unit = \"Mt\",  dem = data.frame(     region = \"UTOPIA\", # NA for every region     year = c(2020, 2030, 2050),     slice = \"ANNUAL\",     dem = c(100, 200, 300)  ),  region = \"UTOPIA\", # optional, to narrow the specification of the demand  )"},{"path":"https://energyRt.org/reference/newExport.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new export object — newExport","title":"Create new export object — newExport","text":"Export object represent commodity export Rest World (RoW).","code":""},{"path":"https://energyRt.org/reference/newExport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new export object — newExport","text":"","code":"newExport(   name,   desc = \"\",   commodity = \"\",   unit = NULL,   reserve = Inf,   exp = data.frame(),   misc = list() )"},{"path":"https://energyRt.org/reference/newExport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new export object — newExport","text":"name character. Name export object, used sets. desc character. Description export object. commodity character. Name exported commodity. unit character. Unit exported commodity. reserve numeric. Total accumulated limit model horizon. exp data.frame. Export parameters. region character. Region name apply parameter; use NA apply regions. year integer. Year apply parameter; use NA apply years. slice character. Time slice apply parameter; use NA apply slices. exp.lo numeric. Export lower bound. exp.numeric. Export upper bound. exp.fx numeric. Fixed export volume, ignored NA. parameter overrides exp.lo exp.. misc list. Additional information.","code":""},{"path":"https://energyRt.org/reference/newExport.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create new export object — newExport","text":"export object given specifications.","code":""},{"path":"https://energyRt.org/reference/newExport.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create new export object — newExport","text":"export type process adds \"external\" source commodity model. Rest World (RoW) modeled explicitly, export import objects define control exchange RoW. operation export object similar demand objects, two different classes used distinguish domestic external sources final consumption. export controlled exp data frame, specifies bounds fixed values export export flow. exp.fx column used specify fixed values export flow, making export flow exogenous. exp.lo exp.columns used specify lower upper bounds export flow, making export flow endogenous. price column used specify exogenous price export commodity. reserve slot used set limits total export model horizon.","code":""},{"path":"https://energyRt.org/reference/newImport.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new export object — newImport","title":"Create new export object — newImport","text":"Import object represent commodity import Rest World (RoW).","code":""},{"path":"https://energyRt.org/reference/newImport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new export object — newImport","text":"","code":"newImport(   name,   desc = \"\",   commodity = \"\",   unit = NULL,   reserve = Inf,   imp = data.frame(),   misc = list() )"},{"path":"https://energyRt.org/reference/newImport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new export object — newImport","text":"name character. Name import object, used sets. desc character. Description import object. commodity character. Name imported commodity. unit character. Unit imported commodity. reserve numeric. Total accumulated limit model horizon. imp data.frame. Import parameters. region character. Region name apply parameter; use NA apply regions. year integer. Year apply parameter; use NA apply years. slice character. Time slice apply parameter; use NA apply slices. imp.lo numeric. Lower bound import volume. imp.numeric. Upper bound import volume. imp.fx numeric. Fixed import volume, ignored NA. parameter overrides imp.lo imp.. misc list. Additional information.","code":""},{"path":"https://energyRt.org/reference/newImport.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create new export object — newImport","text":"import object given specifications.","code":""},{"path":"https://energyRt.org/reference/newImport.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create new export object — newImport","text":"Constructor import object. Import object adds \"external\" source commodity model. RoW modeled explicitly region, export import objects define control exchange RoW. operation similar demand object, two ideas distinguishes internal external final consumption. exchange can exogenously defined (imp.fx) optimized model within given limits (imp.lo, imp.). price column used define price imported commodity. \"Reserve\" sets total amount can imported model horizon.","code":""},{"path":"https://energyRt.org/reference/newModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new model object — newModel","title":"Create new model object — newModel","text":"Create new model object","code":""},{"path":"https://energyRt.org/reference/newModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new model object — newModel","text":"","code":"newModel(name = \"\", desc = \"\", ...)  # S4 method for class 'model' setHorizon(obj, ...)  # S4 method for class 'model' getHorizon(obj)"},{"path":"https://energyRt.org/reference/newModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new model object — newModel","text":"name name model ... configuration parameters (see class config) model elements (classes commodity, technology, etc.)","code":""},{"path":"https://energyRt.org/reference/newRegistry.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new registry object. — newRegistry","title":"Create a new registry object. — newRegistry","text":"Create new registry object.","code":""},{"path":"https://energyRt.org/reference/newRegistry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new registry object. — newRegistry","text":"","code":"newRegistry(   class = c(\"scenario\", \"model\", \"repository\"),   name = NULL,   registry_env = \".GlobalEnv\",   store_env = \".scen\" )"},{"path":"https://energyRt.org/reference/newRegistry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new registry object. — newRegistry","text":"class character, type classes stored registry. name character, name registry object. registry_env character, environment store registry object. store_env character, environment store objects.","code":""},{"path":"https://energyRt.org/reference/newRepository.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new repository object — newRepository","title":"Create new repository object — newRepository","text":"Create new repository object","code":""},{"path":"https://energyRt.org/reference/newRepository.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new repository object — newRepository","text":"","code":"newRepository(   name = \"base_repository\",   ...,   desc = NA_character_,   misc = list() )"},{"path":"https://energyRt.org/reference/newRepository.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new repository object — newRepository","text":"name character. Name repository. ... list. Model objects (\"bricks\"), e.g., technologies, constraints, costs, etc.,  stored names keys, gropped named lists. desc character. Description repository. misc list. additional data information store object.","code":""},{"path":[]},{"path":"https://energyRt.org/reference/newScenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a new scenario object — newScenario","title":"Generate a new scenario object — newScenario","text":"Generate new scenario object","code":""},{"path":"https://energyRt.org/reference/newScenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a new scenario object — newScenario","text":"","code":"newScenario(   name,   model = NULL,   path = fp(get_scenarios_path(), name),   ...,   env_name = \".scen\",   registry = get_registry(),   replace = FALSE )"},{"path":"https://energyRt.org/reference/newScenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a new scenario object — newScenario","text":"name character. Name scenario. path character. Path scenario directory. ...  env_name name environment assign scenario . registry optional registry object register scenario. replace logical. TRUE, replace entry scenario registry entry already exists.","code":""},{"path":"https://energyRt.org/reference/newSubsidy.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new subsidy object — newSub","title":"Create a new subsidy object — newSub","text":"Subsidies used represent financial support provided production, consumption, balance commodity.","code":""},{"path":"https://energyRt.org/reference/newSubsidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new subsidy object — newSub","text":"","code":"newSub(   name,   desc = \"\",   comm = \"\",   region = character(),   defVal = 0,   sub = data.frame(),   misc = list() )  newSubsidy(   name,   desc = \"\",   comm = \"\",   region = character(),   defVal = 0,   sub = data.frame(),   misc = list() )"},{"path":"https://energyRt.org/reference/newSubsidy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new subsidy object — newSub","text":"name character. Name subsidy object, used sets. desc character. Description subsidy object. comm character. Name subsidized commodity. region character. Region subsidy applied. defVal numeric. Default value subsidy. sub data.frame. Subsidy values. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Time slice apply parameter, NA every slice. inp numeric. Input subsidy, e.g., per unit commodity consumed processes. numeric. Output subsidy, e.g., per unit commodity produced processes. bal numeric. Balance subsidy, e.g., per unit commodity balance (production - consumption). misc list. additional information data store subsidy object.","code":""},{"path":"https://energyRt.org/reference/newSubsidy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new subsidy object — newSub","text":"object class sub","code":""},{"path":"https://energyRt.org/reference/newSupply.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new supply object — newSupply","title":"Create new supply object — newSupply","text":"supply class used add domestic source commodity model, given reserves, availability, costs.","code":""},{"path":"https://energyRt.org/reference/newSupply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new supply object — newSupply","text":"","code":"newSupply(   name = NA_character_,   desc = NA_character_,   commodity = character(),   unit = character(),   weather = data.frame(),   reserve = data.frame(),   availability = data.frame(),   region = character(),   misc = list() )"},{"path":"https://energyRt.org/reference/newSupply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new supply object — newSupply","text":"name character. Name supply object, used sets. desc character. Description supply object. commodity character. supplied commodity short name. unit character. main unit commodity used model. weather data.frame. Weather factors apply supply. weather character. Name weather factor apply. Must match weather factor  names weather class model. wava.lo numeric. Coefficient links weather factor lower bound  availability factor ava.lo. wava.numeric. Coefficient links weather factor upper bound  availability factor ava.. wava.fx numeric. Coefficient links weather factor fixed value  availability factor ava.fx. parameter overrides  wava.lo wava.. reserve data.frame. Total available resource. Applicable exhaustible resources. Set region. set, resource considered infinite. region character. Region name apply parameter.  Use NA apply regions. res.lo numeric. Lower bound total available resource. res.numeric. Upper bound total available resource. res.fx numeric. Fixed value total available resource.  parameter overrides res.lo res.. availability data.frame. Availability resource physical units. region character. Region name apply parameter. Use NA apply regions. year integer. Year apply parameter. Use NA apply years. slice character. Time slice apply parameter. Use NA apply slices. ava.lo numeric. Lower bound availability factor. ava.numeric. Upper bound availability factor. ava.fx numeric. Fixed value availability factor.  parameter overrides ava.lo ava.. cost numeric. Cost resource extraction,  set, resource considered free. region character. Regions supply process exists. Must include regions used slots. availability reserve slots also limit possible regions. misc list. List additional parameters used model can used reference user-defined functions. example, links source supply data, metadata.","code":""},{"path":"https://energyRt.org/reference/newSupply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create new supply object — newSupply","text":"supply object given specifications.","code":""},{"path":"https://energyRt.org/reference/newSupply.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create new supply object — newSupply","text":"Constructor supply object. !!!Add details ","code":""},{"path":"https://energyRt.org/reference/newSupply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create new supply object — newSupply","text":"","code":"SUP_COA <- newSupply(    name = \"SUP_COA\",    desc = \"Coal supply\",    commodity = \"COA\",    unit = \"PJ\",    reserve = data.frame(       region = c(\"R1\", \"R2\", \"R3\"),       res.up = c(2e5, 1e4, 3e6) # total reserves/deposits    ),    availability = data.frame(       region = c(\"R1\", \"R2\", \"R3\"),       year = NA_integer_,       slice = \"ANNUAL\",       ava.up = c(1e3, 1e2, 2e2), # annual availability       cost = c(10, 20, 30) # cost of the resource (currency per unit)    ),    region = c(\"R1\", \"R2\", \"R3\")  ) #> Error in .data2slots(\"supply\", name = name, desc = desc, commodity = commodity,     unit = unit, weather = weather, reserve = reserve, availability = availability,     region = region, misc = misc): argument \"x\" is missing, with no default class(SUP_COA) #> Error: object 'SUP_COA' not found"},{"path":"https://energyRt.org/reference/newTax.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new tax object — newTax","title":"Create a new tax object — newTax","text":"Taxes used represent financial levy imposed production, consumption, balance commodity.","code":""},{"path":"https://energyRt.org/reference/newTax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new tax object — newTax","text":"","code":"newTax(   name,   desc = \"\",   comm = \"\",   region = character(),   defVal = 0,   tax = data.frame(),   misc = list() )"},{"path":"https://energyRt.org/reference/newTax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new tax object — newTax","text":"name character. Name tax object, used sets. desc character. Description tax object. comm character. Name taxed commodity. region character. Region tax applied. defVal numeric. Default value tax specified sets, 0 specified. tax data.frame. Tax values. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Time slice apply parameter, NA every slice. inp numeric. Input tax, e.g., per unit commodity consumed processes. numeric. Output tax, e.g., per unit commodity produced processes. bal numeric. Balance tax, e.g., per unit commodity balance (production - consumption). misc list. Additional information.","code":""},{"path":"https://energyRt.org/reference/newTax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new tax object — newTax","text":"object class tax","code":""},{"path":"https://energyRt.org/reference/newTrade.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new trade object — newTrade","title":"Create new trade object — newTrade","text":"Constructor trade object.","code":""},{"path":"https://energyRt.org/reference/newTrade.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new trade object — newTrade","text":"","code":"newTrade(   name = \"\",   desc = \"\",   commodity = character(),   routes = data.frame(),   trade = data.frame(),   fixom = data.frame(),   varom = data.frame(),   invcost = data.frame(),   olife = data.frame(),   start = data.frame(),   end = data.frame(),   capacity = data.frame(),   capacityVariable = TRUE,   aux = data.frame(),   aeff = data.frame(),   cap2act = 1,   optimizeRetirement = FALSE,   misc = list() )"},{"path":"https://energyRt.org/reference/newTrade.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new trade object — newTrade","text":"name character. Name trade object, used sets. desc character. Description trade object. commodity character. traded commodity short name. routes data.frame. Source destination regions. bivariate trade define directions separate rows. character. Source region. character. Destination region. trade data.frame. Technical parameters trade. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Time slice apply parameter, NA every slice. trade numeric. Trade volume. fixom data.frame. (implemented!) Fixed operation maintenance costs. varom data.frame. (implemented!) Variable operation maintenance costs. invcost data.frame. Investment cost, used capacityVariable TRUE. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. invcost numeric. Investment cost. olife numeric. Operational life trade object. start data.frame. Start year trade-type process available investment. region character. Regions trade-type process available investment. start integer. first year trade-type process available investment. end data.frame. End year trade-type process available investment. region character. Region name apply parameter, NA every region. end integer. last year trade-type process available investment. capacity data.frame. (implemented!) Capacity parameters trade object. capacityVariable logical. TRUE, capacity variable trade object optimized.  FALSE, capacity defined availability parameters (ava.*) trade-flow units. aux data.frame. Auxiliary commodity trade. acomm character. Name auxiliary commodity (used sets). unit character. Unit auxiliary commodity. aeff data.frame. Auxiliary commodity efficiency parameters. acomm character. Name auxiliary commodity (used sets). region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Time slice apply parameter, NA every slice. trade2ainp numeric. Trade--auxiliary-input-commodity coefficient (multiplier). trade2aout numeric. Trade--auxiliary-output-commodity coefficient (multiplier). cap2act numeric. Capacity activity ratio. optimizeRetirement logical. Incidates retirement trade object optimized. Also requires parameter model scenario class set TRUE effective. misc list. Additional information.","code":""},{"path":"https://energyRt.org/reference/newTrade.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create new trade object — newTrade","text":"trade object given specifications.","code":""},{"path":"https://energyRt.org/reference/newTrade.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create new trade object — newTrade","text":"Trade objects used represent inter-regional exchange model. Without trade, every region isolated can use resources. class defines trade routes, efficiency, costs, parameters related process. Number routes per trade object limited. One trade object can part entire trade network model. However, distinct name routs optimized together. Create separate trade objects optimize different parts trade network (aka transmission lines).","code":""},{"path":"https://energyRt.org/reference/newTrade.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create new trade object — newTrade","text":"","code":"PIPELINE <- newTrade(   name = \"PIPELINE\",   desc = \"Some transport pipeline\",   routes = data.frame(     src = c(\"R1\", \"R2\"),     dst = c(\"R2\", \"R3\")   ),   trade = data.frame(     src = c(\"R1\", \"R2\"),     dst = c(\"R2\", \"R3\"),     teff = c(0.99, 0.98)   ),   olife = list(olife = 60) )"},{"path":"https://energyRt.org/reference/newWeather.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new weather object — newWeather","title":"Create new weather object — newWeather","text":"weather data-carrying class exogenous shocks used influence operation processes model.","code":""},{"path":"https://energyRt.org/reference/newWeather.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new weather object — newWeather","text":"","code":"newWeather(   name = \"\",   desc = \"\",   unit = as.character(NA),   region = character(),   timeframe = character(),   defVal = 0,   weather = data.frame(),   misc = list() )"},{"path":"https://energyRt.org/reference/newWeather.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new weather object — newWeather","text":"name character. Name weather factor, used sets. desc character. Description weather factor. unit character. Unit weather factor. region character. Region weather factor applied. timeframe character. Timeframe weather factor. defVal numeric. Default value weather factor, 0 default. weather data.frame. Weather factor values. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Time slice apply parameter, NA every slice. wval numeric. Weather factor value.","code":""},{"path":"https://energyRt.org/reference/newWeather.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create new weather object — newWeather","text":"weather object given specifications.","code":""},{"path":"https://energyRt.org/reference/newWeather.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create new weather object — newWeather","text":"Weather factors separated model parameters can added replaced different scenarios. !!!Additional details...","code":""},{"path":"https://energyRt.org/reference/obj2mem.html","id":null,"dir":"Reference","previous_headings":"","what":"Loads objects from disk to memory — obj2mem","title":"Loads objects from disk to memory — obj2mem","text":"Loads objects disk memory","code":""},{"path":"https://energyRt.org/reference/obj2mem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loads objects from disk to memory — obj2mem","text":"","code":"obj2mem(obj, verbose = TRUE)"},{"path":"https://energyRt.org/reference/obj2mem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loads objects from disk to memory — obj2mem","text":"obj Object S4 class, saved disk (scenario, model, etc.) verbose TRUE, prints messages","code":""},{"path":"https://energyRt.org/reference/options.html","id":null,"dir":"Reference","previous_headings":"","what":"Set or get directory for/with scenarios — set_scenarios_path","title":"Set or get directory for/with scenarios — set_scenarios_path","text":"Set get directory /scenarios","code":""},{"path":"https://energyRt.org/reference/options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set or get directory for/with scenarios — set_scenarios_path","text":"","code":"set_scenarios_path(path = NULL)  get_scenarios_path()"},{"path":"https://energyRt.org/reference/options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set or get directory for/with scenarios — set_scenarios_path","text":"path","code":""},{"path":"https://energyRt.org/reference/parameter-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to specify the model set or parameter — parameter-class","title":"An S4 class to specify the model set or parameter — parameter-class","text":"S4 class specify model set parameter","code":""},{"path":"https://energyRt.org/reference/parameter-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to specify the model set or parameter — parameter-class","text":"name character. desc character. dimSets character. type factor, defVal numeric. interpolation character. data data.frame. misc list.","code":""},{"path":"https://energyRt.org/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://energyRt.org/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://energyRt.org/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://energyRt.org/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://energyRt.org/reference/progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Switch on/off and select/customize progress bar — set_progress_bar","title":"Switch on/off and select/customize progress bar — set_progress_bar","text":"Switch /select/customize progress bar","code":""},{"path":"https://energyRt.org/reference/progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Switch on/off and select/customize progress bar — set_progress_bar","text":"","code":"set_progress_bar(type = \"bw\", show = TRUE, clear = FALSE)  show_progress_bar(show = TRUE)"},{"path":"https://energyRt.org/reference/progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Switch on/off and select/customize progress bar — set_progress_bar","text":"type character, type progress bar display. Existing options: \"bw\", \"default\", \"cli\", \"progress\". show logical, progress bar visible TRUE. clear logical, sets progressr.clear global option. TRUE, outout progress bar cleared.","code":""},{"path":"https://energyRt.org/reference/read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read solution — read_solution","title":"Read solution — read_solution","text":"function method read outputs solved model/scenario return scenario object populated variables data.","code":""},{"path":"https://energyRt.org/reference/read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read solution — read_solution","text":"","code":"read_solution(obj, ...)  # S4 method for class 'scenario' read(obj, ...)"},{"path":"https://energyRt.org/reference/read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read solution — read_solution","text":"obj scenario object ... optional tmp.dir (missing scenario object replace saved path)","code":""},{"path":[]},{"path":"https://energyRt.org/reference/register.html","id":null,"dir":"Reference","previous_headings":"","what":"Register an object in the registry. — register","title":"Register an object in the registry. — register","text":"Register object registry.","code":""},{"path":"https://energyRt.org/reference/register.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register an object in the registry. — register","text":"","code":"register(   obj,   registry,   name = obj@name,   project = \"\",   path = \"\",   memo = \"\",   datetime = lubridate::now(tzone = \"UTC\"),   user = Sys.info()[\"user\"],   system = Sys.info()[\"sysname\"],   ...,   env = obj@misc$env,   replace = FALSE )"},{"path":"https://energyRt.org/reference/register.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register an object in the registry. — register","text":"obj object registered. registry registry object add entry. name character, name object. project character, optional, name project. path character, optional path object's 'onDisk' directory. memo character, optional short note object. datetime timestamp, optional, date time registration. user character, optional, user registered object. system character, optional, system object registered. ... (reserved future use). env character, environment object stored. replace logical, TRUE, replace existing entry.","code":""},{"path":"https://energyRt.org/reference/renameSets.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename data.frame columns of list of data.frames. — renameSets","title":"Rename data.frame columns of list of data.frames. — renameSets","text":"Rename data.frame columns list data.frames.","code":""},{"path":"https://energyRt.org/reference/renameSets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename data.frame columns of list of data.frames. — renameSets","text":"","code":"renameSets(x, newNames = NULL)"},{"path":"https://energyRt.org/reference/renameSets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename data.frame columns of list of data.frames. — renameSets","text":"x data.frame list data frames. newNames named character vector list new names values, old names names.","code":""},{"path":"https://energyRt.org/reference/renameSets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename data.frame columns of list of data.frames. — renameSets","text":"depending input, renamed data.frame list renamed data.frames.","code":""},{"path":"https://energyRt.org/reference/renameSets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename data.frame columns of list of data.frames. — renameSets","text":"","code":"if (FALSE) { # \\dontrun{ x <- data.frame(a = letters, n = 1:length(letters)) x renameSets(x[1:3, ], c(a = \"A\", n = \"N\")) renameSets(x[1:3, ], list(a = \"B\", n = \"M\")) } # }"},{"path":"https://energyRt.org/reference/repository-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to store the model objects. — repository-class","title":"An S4 class to store the model objects. — repository-class","text":"S4 class store model objects.","code":""},{"path":"https://energyRt.org/reference/repository-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to store the model objects. — repository-class","text":"name character. Name repository. desc character, short desc purpose content repository. data list repositories objects permitted classes. names objects (object@name) must unique. permit character vector names classes permitted store repository. misc list, additional data information store object.","code":""},{"path":[]},{"path":"https://energyRt.org/reference/revalueSets.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace specified values with new values in factor or character columns of a data.frame. — revalueSets","title":"Replace specified values with new values in factor or character columns of a data.frame. — revalueSets","text":"Replace specified values new values factor character columns data.frame.","code":""},{"path":"https://energyRt.org/reference/revalueSets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace specified values with new values in factor or character columns of a data.frame. — revalueSets","text":"","code":"revalueSets(x, newValues = NULL)"},{"path":"https://energyRt.org/reference/revalueSets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace specified values with new values in factor or character columns of a data.frame. — revalueSets","text":"x vector newValues names list named vectors. names list equal names data.frame columns wich values replaced. named vector new names values old values names.","code":""},{"path":"https://energyRt.org/reference/revalueSets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace specified values with new values in factor or character columns of a data.frame. — revalueSets","text":"x data.frame revalued variables.","code":""},{"path":"https://energyRt.org/reference/revalueSets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace specified values with new values in factor or character columns of a data.frame. — revalueSets","text":"","code":"if (FALSE) { # \\dontrun{ x <- data.frame(a = letters, n = 1:length(letters)) nw1 <- LETTERS[1:10] names(nw1) <- letters[1:10] nw2 <- formatC(1:9, width = 3, flag = \"0\") names(nw2) <- 1:9 newValues <- list(a = nw1, n = nw2) newValues revalueSets(x, newValues) } # }"},{"path":"https://energyRt.org/reference/save_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"Save scenario object on disk in parquet format using arrow package. — save_scenario","title":"Save scenario object on disk in parquet format using arrow package. — save_scenario","text":"Save scenario object disk parquet format using arrow package.","code":""},{"path":"https://energyRt.org/reference/save_scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save scenario object on disk in parquet format using arrow package. — save_scenario","text":"","code":"save_scenario(   scen,   path = scen@path,   format = \"parquet\",   overwrite = TRUE,   clean_start = FALSE,   write_log = TRUE,   verbose = TRUE )"},{"path":"https://energyRt.org/reference/save_scenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save scenario object on disk in parquet format using arrow package. — save_scenario","text":"scen scenario object. path character. Path scenario directory. format file format (currently parquet , arrow feather implemented releases). overwrite logical. Overwrite existing scenario directory. clean_start logical. Clean scenario directory saving. write_log logical. Write (update) logfile. verbose logical. Print messages.","code":""},{"path":"https://energyRt.org/reference/save_scenario.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save scenario object on disk in parquet format using arrow package. — save_scenario","text":"scenario object slots saved disk.","code":""},{"path":"https://energyRt.org/reference/scenario-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent scenario, an interpolated and/or solved model. — scenario-class","title":"An S4 class to represent scenario, an interpolated and/or solved model. — scenario-class","text":"S4 class represent scenario, interpolated /solved model.","code":""},{"path":"https://energyRt.org/reference/scenario-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent scenario, an interpolated and/or solved model. — scenario-class","text":"name character. Name scenario. desc character. Description scenario. model model. Model object. settings settings. modInp modInp object. modOut modOut. status list. misc list. name  desc  model  inMemory  path","code":""},{"path":"https://energyRt.org/reference/set_glpk_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the path to the GLPK library — set_glpk_path","title":"Set the path to the GLPK library — set_glpk_path","text":"Set path GLPK library","code":""},{"path":"https://energyRt.org/reference/set_glpk_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the path to the GLPK library — set_glpk_path","text":"","code":"set_glpk_path(path = NULL)"},{"path":"https://energyRt.org/reference/set_glpk_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the path to the GLPK library — set_glpk_path","text":"path character. Path GLPK library glpsol.* executable.","code":""},{"path":"https://energyRt.org/reference/set_glpk_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the path to the GLPK library — set_glpk_path","text":"","code":"if (FALSE) { # \\dontrun{ set_glpk_path(\"/usr/local/bin/glpk\") # Linux & Mac set_glpk_path(\"C:/Program Files/glpk/bin\") # Windows get_glpk_path() } # }"},{"path":"https://energyRt.org/reference/set_julia_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the path to Julia installation — set_julia_path","title":"Set the path to Julia installation — set_julia_path","text":"Set path Julia installation","code":""},{"path":"https://energyRt.org/reference/set_julia_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the path to Julia installation — set_julia_path","text":"","code":"set_julia_path(path = NULL)"},{"path":"https://energyRt.org/reference/set_julia_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the path to Julia installation — set_julia_path","text":"path character. Path Julia installation. NULL, system path returned.","code":""},{"path":"https://energyRt.org/reference/set_python_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Set or get python installation path to be used to solve models — set_python_path","title":"Set or get python installation path to be used to solve models — set_python_path","text":"Set get python installation path used solve models","code":""},{"path":"https://energyRt.org/reference/set_python_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set or get python installation path to be used to solve models — set_python_path","text":"","code":"set_python_path(path = NULL)"},{"path":"https://energyRt.org/reference/set_python_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set or get python installation path to be used to solve models — set_python_path","text":"path character path python installation. NULL, global operation path used.","code":""},{"path":"https://energyRt.org/reference/settings-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent scenario settings — settings-class","title":"An S4 class to represent scenario settings — settings-class","text":"S4 class represent scenario settings","code":""},{"path":"https://energyRt.org/reference/settings-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent scenario settings — settings-class","text":"subset list. solver list. sourceCode list. yearFraction","code":""},{"path":"https://energyRt.org/reference/size.html","id":null,"dir":"Reference","previous_headings":"","what":"Size of an object — size","title":"Size of an object — size","text":"Size object","code":""},{"path":"https://energyRt.org/reference/size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Size of an object — size","text":"","code":"size(   x,   level1 = FALSE,   units = \"auto\",   sort = TRUE,   decreasing = FALSE,   byteTol = 0,   asNumeric = FALSE )"},{"path":"https://energyRt.org/reference/size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Size of an object — size","text":"x R object asNumeric","code":""},{"path":"https://energyRt.org/reference/size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Size of an object — size","text":"","code":"size(1) #> [1] \"56 bytes\" size(rep(1, 1e3)) #> [1] \"7.9 Kb\" size(rep(1L, 1e3)) #> [1] \"4 Kb\""},{"path":"https://energyRt.org/reference/solve.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions and methods to solve model and scenario objects — solve_model","title":"Functions and methods to solve model and scenario objects — solve_model","text":"function interpolates model, writes script directory, runs external software solve model, reads solution results, returns scenario object solution.","code":""},{"path":"https://energyRt.org/reference/solve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions and methods to solve model and scenario objects — solve_model","text":"","code":"solve_model(obj, name = NULL, ...)  # S4 method for class 'model,character' solve(a, b, ...)  solve_scenario(obj, name = obj@name, ...)  # S4 method for class 'scenario,character' solve(a, b, ...)"},{"path":"https://energyRt.org/reference/solve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions and methods to solve model and scenario objects — solve_model","text":"obj model scenario object name character name scenario return ...  solver character list solver settings tmp.dir character path temporary directory tmp.del logical delete temporary directory run","code":""},{"path":[]},{"path":"https://energyRt.org/reference/storage.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new storage object — newStorage","title":"Create new storage object — newStorage","text":"Storage type technological processes accumulating capacity commodity.","code":""},{"path":"https://energyRt.org/reference/storage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new storage object — newStorage","text":"","code":"newStorage(   name = \"\",   desc = \"\",   commodity = character(),   aux = data.frame(),   region = character(),   start = data.frame(),   end = data.frame(),   olife = data.frame(),   charge = data.frame(),   seff = data.frame(),   aeff = data.frame(),   af = data.frame(),   fixom = data.frame(),   varom = data.frame(),   invcost = data.frame(),   capacity = data.frame(),   cap2stg = 1,   fullYear = TRUE,   weather = data.frame(),   optimizeRetirement = FALSE,   misc = list() )"},{"path":"https://energyRt.org/reference/storage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new storage object — newStorage","text":"name character. Name storage (used sets). desc character. Description storage. commodity character. Name stored commodity. aux data.frame. Auxiliary commodities. acomm character. Name auxiliary commodity (used sets). unit character. Unit auxiliary commodity. region character. Region storage technology exists can installed. start data.frame. Start year storage available installation. region character. Regions storage available investment. start integer. first year storage available investment. end data.frame. Last year storage available investment. region character. Region name apply parameter, NA every region. end integer. last year storage available investment. olife data.frame. Operational life storage technology, applicable new investment ,  operational life (retirement) preexiting capacity described stock slot. region character. Region name apply parameter, NA every region. olife integer. Operational life storage technology years. charge data.frame. Pre-charged level beginning operational cycle. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Time slice charged level specified. charge numeric. Pre-charged targeted level specified slice. seff data.frame. Storage efficiency parameters. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Time slice apply parameter, NA every slice. stgeff numeric. Storage decay annual rate. inpeff numeric. Input efficiency rate. outeff numeric. Output efficiency rate. aeff data.frame. Auxiliary commodities efficiency parameters. acomm character. Name auxiliary commodity (used sets). region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Time slice apply parameter, NA every slice. stg2ainp numeric. Storaage-level--auxiliary-input-commodity coefficient (multiplier). cinp2ainp numeric. Input-commodity--auxiliary-input-commodity coefficient (multiplier). cout2ainp numeric. Output-commodity--auxiliary-input-commodity coefficient (multiplier). stg2aout numeric. Storage-level--auxiliary-output-commodity coefficient (multiplier). cinp2aout numeric. Input-commodity--auxiliary-output-commodity coefficient (multiplier). cout2aout numeric. Output-commodity--auxiliary-output-commodity coefficient (multiplier). cap2ainp numeric. Capacity--auxiliary-input-commodity coefficient (multiplier). cap2aout numeric. Capacity--auxiliary-output-commodity coefficient (multiplier). ncap2ainp numeric. New-capacity--auxiliary-input-commodity coefficient (multiplier). ncap2aout numeric. New-capacity--auxiliary-output-commodity coefficient (multiplier). ncap2stg numeric. New-capacity--storage-level coefficient (multiplier). af data.frame. Availability factor parameters. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Time slice apply parameter, NA every slice. af.lo numeric. Lower bound availability factor. af.numeric. Upper bound availability factor. af.fx numeric. Fixed value availability factor. parameter overrides af.lo af.. cinp.lo numeric. Lower bound input commodity availability factor. cinp.numeric. Upper bound input commodity availability factor. cinp.fx numeric. Fixed value input commodity availability factor. parameter overrides cinp.lo cinp.. cout.lo numeric. Lower bound output commodity availability factor. cout.numeric. Upper bound output commodity availability factor. cout.fx numeric. Fixed value output commodity availability factor.  parameter overrides cout.lo cout.. fixom data.frame. Fixed operation maintenance cost. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. fixom numeric. Fixed operation maintenance cost specified sets. varom data.frame. Variable operation maintenance cost. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Time slice apply parameter, NA every slice. inpcost numeric. Costs associated input commodity. outcost numeric. Costs associated output commodity. stgcost numeric. Costs associated storage level. invcost data.frame. Investment cost. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. invcost numeric. Overnight investment cost specified region year. wacc numeric. Weighted average cost capital. supplied, discount model scenario used. (currently ignored) capacity data.frame. Capacity parameters storage technology. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. cap numeric. Capacity storage technology. cap.lo numeric. Lower bound storage capacity. cap.numeric. Upper bound storage capacity. cap.fx numeric. Fixed value storage capacity. parameter overrides cap.lo cap.. ncap.lo numeric. Lower bound new storage capacity. ncap.numeric. Upper bound new storage capacity. ncap.fx numeric. Fixed value new storage capacity. parameter overrides ncap.lo ncap.. ret.lo numeric. Lower bound storage capacity retirement. ret.numeric. Upper bound storage capacity retirement. ret.fx numeric. Fixed value storage capacity retirement. parameter overrides ret.lo ret.. cap2stg numeric. Charging discharging capacity storing capacity inverse ratio. Can used define storage duration. fullYear logical. TRUE (default), storage technology operates parent timeframes year. last time-slice timeframe used preciding time-slice first time-slice group time-slices within parent timeframe. FALSE, storage charge discchare cycle limited parent timeframe. last time-slice timeframe used preciding time-slice first time-slice group time-slices within parent timeframe. weather data.frame. Weather factors multipliers. weather character. Name weather factor apply. waf.lo numeric. Coefficient links weather factor lower bound availability factor. waf.numeric. Coefficient links weather factor upper bound availability factor. waf.fx numeric. Coefficient links weather factor fixed value availability factor. parameter overrides waf.lo waf.. wcinp.lo numeric. Coefficient links weather factor lower bound input commodity availability factor. wcinp.numeric. Coefficient links weather factor upper bound input commodity availability factor. wcinp.fx numeric. Coefficient links weather factor fixed value input commodity availability factor. parameter overrides wcinp.lo wcinp.. wcout.lo numeric. Coefficient links weather factor lower bound output commodity availability factor. wcout.numeric. Coefficient links weather factor upper bound output commodity availability factor. wcout.fx numeric. Coefficient links weather factor fixed value output commodity availability factor. parameter overrides wcout.lo wcout.. optimizeRetirement logical. Incidates retirement storage optimized. Also requires parameter model scenario class set TRUE effective. misc list. List additional parameters used model can used reference user-defined functions. example, links source storage data, metadata.","code":""},{"path":"https://energyRt.org/reference/storage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create new storage object — newStorage","text":"storage object","code":""},{"path":"https://energyRt.org/reference/storage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create new storage object — newStorage","text":"Storage can used combination processes, technologies, supply, demand represent complex technological chains, demand supply technologies time-shift. Operation storage includes accumulation, storing, release stored commodity. storing cycle operates ordered time-slices commodity timeframe. cycle looped either annual basis (last time-slice year follows first time slice year) within parent time-frame (example, commodity time-frame \"HOUR\" parent time-frame \"DAY\" storage cycle calendar day).","code":""},{"path":"https://energyRt.org/reference/sub-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent a commodity subsidy — sub-class","title":"An S4 class to represent a commodity subsidy — sub-class","text":"S4 class represent commodity subsidy","code":""},{"path":"https://energyRt.org/reference/sub-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent a commodity subsidy — sub-class","text":"name character. desc character. comm character. region character. defVal numeric. value data.frame. misc list.","code":""},{"path":"https://energyRt.org/reference/summand-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent a summand in a constraint. — summand-class","title":"An S4 class to represent a summand in a constraint. — summand-class","text":"S4 class represent summand constraint.","code":""},{"path":"https://energyRt.org/reference/summand-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent a summand in a constraint. — summand-class","text":"desc character. Description linear term. variable character. Name variable. .sum list. List sets summand created. mult data.frame. Multiplying coefficients variable set .sum slot. defVal numeric. Default value summand. misc list. Additional information.","code":""},{"path":[]},{"path":"https://energyRt.org/reference/supply-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent a supply of a commodity — supply-class","title":"An S4 class to represent a supply of a commodity — supply-class","text":"S4 class represent supply commodity","code":""},{"path":"https://energyRt.org/reference/supply-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An S4 class to represent a supply of a commodity — supply-class","text":"supply object given specifications.","code":""},{"path":"https://energyRt.org/reference/supply-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent a supply of a commodity — supply-class","text":"name character. Name supply object, used sets. desc character. Description supply object. commodity character. supplied commodity short name. unit character. main unit commodity used model. weather data.frame. Weather factors apply supply. weather character. Name weather factor apply. Must match weather factor  names weather class model. wava.lo numeric. Coefficient links weather factor lower bound  availability factor ava.lo. wava.numeric. Coefficient links weather factor upper bound  availability factor ava.. wava.fx numeric. Coefficient links weather factor fixed value  availability factor ava.fx. parameter overrides  wava.lo wava.. reserve data.frame. Total available resource. Applicable exhaustible resources. Set region. set, resource considered infinite. region character. Region name apply parameter.  Use NA apply regions. res.lo numeric. Lower bound total available resource. res.numeric. Upper bound total available resource. res.fx numeric. Fixed value total available resource.  parameter overrides res.lo res.. availability data.frame. Availability resource physical units. region character. Region name apply parameter. Use NA apply regions. year integer. Year apply parameter. Use NA apply years. slice character. Time slice apply parameter. Use NA apply slices. ava.lo numeric. Lower bound availability factor. ava.numeric. Upper bound availability factor. ava.fx numeric. Fixed value availability factor.  parameter overrides ava.lo ava.. cost numeric. Cost resource extraction,  set, resource considered free. region character. Regions supply process exists. Must include regions used slots. availability reserve slots also limit possible regions. misc list. List additional parameters used model can used reference user-defined functions. example, links source supply data, metadata.","code":""},{"path":"https://energyRt.org/reference/sypply.html","id":null,"dir":"Reference","previous_headings":"","what":"Update supply object — update,supply-method","title":"Update supply object — update,supply-method","text":"Update supply object","code":""},{"path":"https://energyRt.org/reference/sypply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update supply object — update,supply-method","text":"","code":"# S4 method for class 'supply' update(object, ...)"},{"path":"https://energyRt.org/reference/tax-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent a commodity tax — tax-class","title":"An S4 class to represent a commodity tax — tax-class","text":"S4 class represent commodity tax","code":""},{"path":"https://energyRt.org/reference/tax-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent a commodity tax — tax-class","text":"name character. Name comm character. desc character. region character. year numeric. defVal numeric. value data.frame. misc list.","code":""},{"path":"https://energyRt.org/reference/technology.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new ","title":"Create a new ","text":"function initializes returns S4 object class technology, representing specific technology given attributes. function arguments slot-names technology class. Every argument specific format described class documentation.","code":""},{"path":"https://energyRt.org/reference/technology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new ","text":"","code":"newTechnology(   name = \"\",   desc = \"\",   input = data.frame(),   output = data.frame(),   group = data.frame(),   aux = data.frame(),   units = data.frame(),   cap2act = as.numeric(1),   geff = data.frame(),   ceff = data.frame(),   aeff = data.frame(),   af = data.frame(),   afs = data.frame(),   weather = data.frame(),   capacity = data.frame(),   invcost = data.frame(),   fixom = data.frame(),   varom = data.frame(),   olife = data.frame(),   region = character(),   start = data.frame(),   end = data.frame(),   timeframe = character(),   fullYear = TRUE,   optimizeRetirement = FALSE,   misc = list() )  # S4 method for class 'technology' update(object, ...)"},{"path":"https://energyRt.org/reference/technology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new ","text":"name character. Name technology, used sets. desc character. Optional description technology reference. input data.frame. Main commodities input. Main commodities linked process capacity activity. parameters defined ceff slot. comm character. Name input commodity. unit character. Unit input commodity. group character. Name input-commodities-group. combustion numeric. combustion factor 0 1 (default 1) calculate emissions fuels combustion (commodities intermediate consumption, broadly) output data.frame. Main commodities output. Main commodities linked process capacity activity. parameters defined ceff slot. comm character. Name output commodity. unit character. Unit output commodity. group character. Name output-commodities-group. group data.frame. Details commodity groups defined input output slots (reference). group character. Name group. Must match group names input output slots. desc character. Description group. unit character. Unit group. aux data.frame. Auxilary commodities, input output, parameters defined aeff slot. acomm character. Name auxilary commodity. unit character. Unit auxilary commodity. units data.frame. Key units process activity capacity (reference). capacity character. Unit capacity use character. Unit 'use' (grouped input) applicable. activity character. Unit activity variable technology. costs character. Currency costs variable technology. cap2act numeric. Capacity activity ratio. Default 1. Specifies much product (activity, output commodity identical) produced per unit capacity. geff data.frame. Input-commodity-group efficiency parameters. region character. Name region apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Name slice apply parameter, NA every slice. group character. Name group apply parameter. Required, must match group names input output slots. ginp2use numeric. Group-input--use coefficient, default 1. ceff data.frame. Main commodity activity efficiency parameters. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Name slice apply parameter, NA every slice. comm character. Name commodity apply parameter, different parameters require specification either input output commodity. cinp2use numeric. Commodity-input--use coefficient, default 1. use2cact numeric. Use--commodity-activity coefficient, default 1. cact2cout numeric. Commodity-activity--commodity-output coefficient, default 1. cinp2ginp numeric. Commodity-input--group-input coefficient, default 1. share.lo numeric. Lower bound share commodity within group, default 0. share.numeric. Upper bound share commodity within group, default 1. share.fx numeric. Fixed share commodity within group, ignored NA. parameter overrides share.lo share.. afc.lo numeric. Lower bound physical value commodity, ignored NA. afc.numeric. Upper bound physical value commodity, ignored NA. afc.fx numeric. Fixed physical value commodity, ignored NA. parameter overrides afc.lo afc.. aeff data.frame. Parameters linking main commodities, activities, capacities auxiliary commodities. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Name slice apply parameter, NA every slice. acomm character. Name auxilary commodity apply parameter. cinp2ainp numeric. Main-commodity-input--auxilary-commodity-input coefficient, ignored NA. cinp2aout numeric. Main-commodity-input--auxilary-commodity-output coefficient, ignored NA. cout2ainp numeric. Main-commodity-output--auxilary-commodity-input coefficient, ignored NA. cout2aout numeric. Main-commodity-output--auxilary-commodity-output coefficient, ignored NA. act2ainp numeric. Technology-activity--auxilary-commodity-input coefficient, ignored NA. act2aout numeric. Technology-activity--auxilary-commodity-output coefficient, ignored NA. cap2ainp numeric. Technology-capacity--auxilary-commodity-input coefficient, ignored NA. cap2aout numeric. Technology-capacity--auxilary-commodity-output coefficient, ignored NA. ncap2ainp numeric. Technology-new-capacity--auxilary-commodity-input-coefficient, ignored NA. ncap2aout numeric. Technology-new-capacity--auxilary-commodity-output coefficient, ignored NA. af data.frame. Timeslice-level availability factor parameters. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Name slice apply parameter, NA every slice. af.lo numeric. Lower bound availability factor, default 0. af.numeric. Upper bound availability factor, default 1. af.fx numeric. Fixed availability factor, ignored NA. parameter overrides af.lo af.. rampup numeric. Ramping-time constraint RHS value, ignored NA. Depends technology timeframe. rampdown numeric. Ramping-time constraint RHS value, ignored NA. Depends technology timeframe. afs data.frame. Timeframe-level availability factor constraints. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Name slice apply parameter, required. afs.lo numeric. Lower bound availability factor timeframe, default 0. afs.numeric. Upper bound availability factor timeframe, default 1. afs.fx numeric. Fixed availability factor timeframe, ignored NA. parameter overrides afs.lo afs.. weather data.frame. Parameters linking weather factors (external shocks specified weather class) availability parameters af, afs, afc. weather character. Name applied weather factor, required, must match weather factor names weather class model. comm character. Name commodity specified afc.* affected weather factor, required afc.* parameters specified. wafc.lo numeric. Multiplying coefficient lower bound commodity availability parameter afc.lo, ignored NA. wafc.numeric. Multiplying coefficient upper bound commodity availability parameter afc., ignored NA. wafc.fx numeric. Multiplying coefficient fixed value commodity availability parameter afc.fx, ignored NA. parameter overrides wafc.lo wafc.. waf.lo numeric. Multiplying coefficient lower bound availability factor parameter af.lo, ignored NA. waf.numeric. Multiplying coefficient upper bound availability factor parameter af., ignored NA. waf.fx numeric. Multiplying coefficient fixed value availability factor parameter af.fx, ignored NA. parameter overrides waf.lo waf.. wafs.numeric. Multiplying coefficient upper bound availability factor parameter afs., ignored NA. wafs.lo numeric. Multiplying coefficient lower bound availability factor parameter afs.lo, ignored NA. wafs.fx numeric. Multiplying coefficient fixed value availability factor parameter afs.fx, ignored NA. parameter overrides wafs.lo wafs.. capacity data.frame. Capacity installed technology (units capacity). region character. Region name apply parameter, NA every region. year integer. Year apply parameter, required, values specified years interpolated. stock numeric. Predefined capacity technology units capacity, default 0. parameter also defines exogenous capacity retirement (age-based), exogenous capacity additions, optimized model, included investment costs. cap.lo numeric. Lower bound total capacity (preexisting stock new installations), ignored NA. cap.numeric. Upper bound total capacity (preexisting stock new installations), ignored NA. cap.fx numeric. Fixed total capacity (preexisting stock new installations), ignored NA. parameter overrides cap.lo cap.. ncap.lo numeric. Lower bound new capacity (new installations), ignored NA. ncap.numeric. Upper bound new capacity (new installations), ignored NA. ncap.fx numeric. Fixed new capacity (new installations), ignored NA. parameter overrides ncap.lo ncap.. ret.lo numeric. Lower bound capacity retirement (age-based), ignored NA. ret.numeric. Upper bound capacity retirement (age-based), ignored NA. ret.fx numeric. Fixed capacity retirement (age-based), ignored NA. parameter overrides ret.lo ret.. invcost data.frame. Total overnight investment costs project (per unit capacity). region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. invcost numeric. Total overnight investment costs project (per unit capacity), default 0. wacc numeric. Weighted average cost capital, (currently ignored). fixom data.frame. Fixed operational maintenance cost (per unit capacity year). region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. fixom numeric. Fixed operational maintenance cost, default 0. varom data.frame. Variable operational maintenance cost (per unit activity commodity). region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Name time-slice (grand-)parent timeframe apply parameter, NA every time-slice technology timeframe. varom numeric. Variable operational maintenance cost per unit activity, default 0. comm character. Name commodity parameter applied, required cvarom parameter. cvarom numeric. Variable operational maintenance cost per unit commodity, default 0. acomm character. Name auxilary commodity avarom applied, required avarom parameter. avarom numeric. Variable operational maintenance cost per unit auxilary commodity, default 0. olife data.frame. Operational life installed technology (years). region character. Region name apply parameter, NA every region. olife integer. Operational life technology installed optimization, years, default 1. region character. Vector regions technology exists can installed. Optional. specified, technology applied regions. specified, must include regions used slots. start data.frame. first year technology can installed. region character. Region name apply parameter, NA every region. start integer. first year technology can installed, NA means years modeled horizon. end data.frame. last year technology can installed. region character. Region name apply parameter, NA every region. end integer. last year technology can installed, default Inf. timeframe character. Name timeframe level technology operating. default, lowest level timeframe commodities used technology applied. fullYear logical. Incidates technology operating full-year basis. Used storages. currently ignored technologies. optimizeRetirement logical. Incidates retirement technology optimized. Also requires parameter model scenario class set TRUE effective. misc list. List additional parameters used model can used reference user-defined functions. example, links source technology data, metadata. object object class technology ... slot-names data update (see newTechnology)","code":""},{"path":"https://energyRt.org/reference/technology.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new ","text":"object class technology.","code":""},{"path":"https://energyRt.org/reference/technology.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new ","text":"","code":"ECOAL <- newTechnology(   name = \"ECOAL\", # name, used in sets, no white spaces or special characters   desc = \"Generic coal power plant\", # any description of the technology   input = data.frame(     comm = \"COAL\", # name of input commodity     unit = \"MMBtu\", # unit of the input commodity     # combustion factor from 0 to 1 (default 1) to calculate emissions     # from fuels combustion (commodities intermediate consumption, more broadly)     combustion = 1   ),   output = data.frame(     comm = \"ELC\", # name of output commodity     unit = \"MWh\" # unit of the output commodity   ),   aux = data.frame(     acomm = c(\"NOx\", \"SO2\", \"Hg\"), # names of auxilary commodities     unit = c(\"kg\", \"kg\", \"g\") # units   ),   # Capacity to activity ration: 8760 MWh output a year per MW of capacity   cap2act = 8760,   ceff = data.frame( # efficiency parameters for the main commodities     comm = \"COAL\",     # efficiency, 1/10 MWh per MMBtu, inverse heat rate     # check: 1 / convert(10, \"MMBtu\", \"MWh\") ~= 34% efficiency     cinp2use = 1 / 10   ),   aeff = data.frame( # paramaters for the auxilary commodities     acomm = c(\"NOx\", \"SO2\", \"Hg\"),     act2aout = c(0.1, 0.2, 0.3) # emission factors, linked to activity   ),   af = data.frame( # availability (capacity) factor by time slices     af.up = 0.95 # maximum 95% per hour   ),   afs = data.frame( # availability factor by timeframes     slice = \"ANNUAL\", # annual availability factor     afs.lo = 0.40, # at least 40% per year     afs.up = 0.85 # maximum 85% per year   ),   fixom = data.frame( # fixed operational and maintenance cost     region = c(\"R1\", \"R2\", NA), # regions, NA - all other regions     fixom = c(100, 200, 150) # MW a year   ),   varom = data.frame( # variable operational and maintenance cost     region = c(\"R1\", \"R2\"), # regions     varom = c(1, 2) # $1 and $2 per MWh   ),   invcost = data.frame( # investment cost     year = c(2020, 2030, 2040), # to differentiate by years     invcost = c(1000, 900, 800) # $1000, $900, $800 per MW   ),   start = data.frame( # start year     start = 2020 # can be installed from 2020   ),   end = data.frame( # end year     end = 2040 # can be installed until 2040   ),   olife = data.frame( # operational life     olife = 30 # years   ),   capacity = data.frame( # existing capacity     year = c(2020, 2030, 2040), # to differentiate by years     region = c(\"R1\"), # exists only in R1     stock = c(300, 200, 100) # age-based exogenous retirement   ),   # regions where the technology can be installed   region = c(\"R1\", \"R2\", \"R5\", \"R7\"), ) draw(ECOAL)"},{"path":"https://energyRt.org/reference/trade-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class to represent inter-regional trade — trade-class","title":"An S4 class to represent inter-regional trade — trade-class","text":"S4 class represent inter-regional trade","code":""},{"path":"https://energyRt.org/reference/trade-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An S4 class to represent inter-regional trade — trade-class","text":"Trade objects used represent inter-regional exchange model. Without trade, every region isolated can use resources. class defines trade routes, efficiency, costs, parameters related process. Number routes per trade object limited. One trade object can part entire trade network model. However, distinct name routs optimized together. Create separate trade objects optimize different parts trade network (aka transmission lines).","code":""},{"path":"https://energyRt.org/reference/trade-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class to represent inter-regional trade — trade-class","text":"name character. Name trade object, used sets. desc character. Description trade object. commodity character. traded commodity short name. routes data.frame. Source destination regions. bivariate trade define directions separate rows. character. Source region. character. Destination region. trade data.frame. Technical parameters trade. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Time slice apply parameter, NA every slice. trade numeric. Trade volume. aux data.frame. Auxiliary commodity trade. acomm character. Name auxiliary commodity (used sets). unit character. Unit auxiliary commodity. aeff data.frame. Auxiliary commodity efficiency parameters. acomm character. Name auxiliary commodity (used sets). region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. slice character. Time slice apply parameter, NA every slice. trade2ainp numeric. Trade--auxiliary-input-commodity coefficient (multiplier). trade2aout numeric. Trade--auxiliary-output-commodity coefficient (multiplier). invcost data.frame. Investment cost, used capacityVariable TRUE. region character. Region name apply parameter, NA every region. year integer. Year apply parameter, NA every year. invcost numeric. Investment cost. fixom data.frame. (implemented!) Fixed operation maintenance costs. varom data.frame. (implemented!) Variable operation maintenance costs. olife numeric. Operational life trade object. start data.frame. Start year trade-type process available investment. region character. Regions trade-type process available investment. start integer. first year trade-type process available investment. end data.frame. End year trade-type process available investment. region character. Region name apply parameter, NA every region. end integer. last year trade-type process available investment. capacity data.frame. (implemented!) Capacity parameters trade object. capacityVariable logical. TRUE, capacity variable trade object optimized.  FALSE, capacity defined availability parameters (ava.*) trade-flow units. cap2act numeric. Capacity activity ratio. optimizeRetirement logical. Incidates retirement trade object optimized. Also requires parameter model scenario class set TRUE effective. misc list. Additional information.","code":""},{"path":"https://energyRt.org/reference/tsl2dtm.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert time-slices to date-time, extract year, month, day of the year, or hour — tsl2dtm","title":"Convert time-slices to date-time, extract year, month, day of the year, or hour — tsl2dtm","text":"Convert time-slices date-time, extract year, month, day year, hour","code":""},{"path":"https://energyRt.org/reference/tsl2dtm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert time-slices to date-time, extract year, month, day of the year, or hour — tsl2dtm","text":"","code":"tsl2dtm(   tsl,   format = tsl_guess_format(tsl),   tmz = \"UTC\",   year = NULL,   mday = NULL )  tsl2year(tsl, return.null = T)  tsl2yday(tsl, return.null = T)  tsl2hour(tsl, return.null = T)  tsl2month(tsl, format = tsl_guess_format(tsl), return.null = T)"},{"path":"https://energyRt.org/reference/tsl2dtm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert time-slices to date-time, extract year, month, day of the year, or hour — tsl2dtm","text":"tsl character vector time slices format character, time slices format tmz time-zone year year, used time-slices store year mday day month, time slices without information return.null logical, valid cased values NA, NULL returned return.null = TRUE,","code":""},{"path":"https://energyRt.org/reference/tsl2dtm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert time-slices to date-time, extract year, month, day of the year, or hour — tsl2dtm","text":"Vector Date-Time format","code":""},{"path":"https://energyRt.org/reference/tsl2dtm.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Convert time-slices to date-time, extract year, month, day of the year, or hour — tsl2dtm","text":"tsl2year(): Extract year time-slices tsl2yday(): Extract day year time-slices tsl2hour(): Extract hour time-slices tsl2month(): Extract month time-slices","code":""},{"path":"https://energyRt.org/reference/tsl2dtm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert time-slices to date-time, extract year, month, day of the year, or hour — tsl2dtm","text":"","code":"tsl <- c(\"y2007_d365_h15\", NA, \"d151_h22\", \"d001\", \"m10_h12\") tsl2dtm(tsl[1]) #> [1] \"2007-12-31 15:00:00 UTC\" tsl2dtm(tsl[1:2]) #> Warning:  1 failed to parse. #> [1] \"2007-12-31 15:00:00 UTC\" NA                        tsl2dtm(tsl[2]) #> NULL tsl2dtm(tsl[3]) #> NULL tsl2dtm(tsl[4]) #> NULL tsl2dtm(tsl[3], year = 2010) #> [1] \"2010-05-31 22:00:00 UTC\" tsl2dtm(tsl[4], year = 1900) #> [1] \"1900-01-01 UTC\" tsl2dtm(tsl[3:4], year = 1900) #> NULL tsl2year(tsl) #> [1] 2007   NA   NA   NA   NA tsl #> [1] \"y2007_d365_h15\" NA               \"d151_h22\"       \"d001\"           #> [5] \"m10_h12\"        tsl2yday(tsl) #> [1] 365  NA 151   1  NA tsl #> [1] \"y2007_d365_h15\" NA               \"d151_h22\"       \"d001\"           #> [5] \"m10_h12\"        tsl2hour(tsl) #> [1] 15 NA 22 NA 12 tsl2month(c(\"d001_h00\", \"d151_h22\", \"d365_h23\")) #> [1]  1  5 12 tsl2month(c(\"m01_h12\", \"m05_h02\", \"m10_h01\")) #> [1]  1  5 10"},{"path":"https://energyRt.org/reference/tsl_formats.html","id":null,"dir":"Reference","previous_headings":"","what":"Common formats of time-slices. — tsl_formats","title":"Common formats of time-slices. — tsl_formats","text":"Common formats time-slices.","code":""},{"path":"https://energyRt.org/reference/tsl_formats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common formats of time-slices. — tsl_formats","text":"","code":"tsl_formats"},{"path":"https://energyRt.org/reference/tsl_formats.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Common formats of time-slices. — tsl_formats","text":"character vector formats: d365 daily time-slices, 365 year (leap year's 366th day disregarded) d365_h24 time slices year-day numbers hours, 8760 total","code":""},{"path":"https://energyRt.org/reference/tsl_guess_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess format of time-slices — tsl_guess_format","title":"Guess format of time-slices — tsl_guess_format","text":"Guess format time-slices","code":""},{"path":"https://energyRt.org/reference/tsl_guess_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess format of time-slices — tsl_guess_format","text":"","code":"tsl_guess_format(tsl)"},{"path":"https://energyRt.org/reference/tsl_guess_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess format of time-slices — tsl_guess_format","text":"tsl","code":""},{"path":"https://energyRt.org/reference/tsl_guess_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Guess format of time-slices — tsl_guess_format","text":"","code":"tsl <- c(\"y2007_d365_h15\", NA, \"d151_h22\", \"d001\", \"m10_h12\") tsl_guess_format(tsl) #> NULL tsl_guess_format(tsl[1]) #> [1] \"y_d365_h24\" tsl_guess_format(tsl[2]) #> NULL tsl_guess_format(tsl[3]) #> [1] \"d365_h24\" tsl_guess_format(tsl[4]) #> [1] \"d365\" tsl_guess_format(tsl[5]) #> [1] \"m12_h24\""},{"path":"https://energyRt.org/reference/update.html","id":null,"dir":"Reference","previous_headings":"","what":"Update trade object — update","title":"Update trade object — update","text":"Update trade object","code":""},{"path":"https://energyRt.org/reference/update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update trade object — update","text":"","code":"# S4 method for class 'storage' update(object, ...)  # S4 method for class 'trade' update(object, ...)  # S4 method for class 'import' update(object, ...)"},{"path":"https://energyRt.org/reference/update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update trade object — update","text":"object S4 class object updated. ... slot-names data update S4 object","code":""},{"path":"https://energyRt.org/reference/weather-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — weather-class","title":"Title — weather-class","text":"Title","code":""},{"path":"https://energyRt.org/reference/weather-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Title — weather-class","text":"name character. desc character. unit character. region character. timeframe character. defVal numeric. weather data.frame. misc list.","code":""},{"path":"https://energyRt.org/reference/write.html","id":null,"dir":"Reference","previous_headings":"","what":"Write scenario object as a Python, Julia, GAMS, or MathProg script with data files to a directory — write_script","title":"Write scenario object as a Python, Julia, GAMS, or MathProg script with data files to a directory — write_script","text":"Write scenario object Python, Julia, GAMS, MathProg script data files directory","code":""},{"path":"https://energyRt.org/reference/write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write scenario object as a Python, Julia, GAMS, or MathProg script with data files to a directory — write_script","text":"","code":"write_script(scen, tmp.dir = NULL, solver = NULL, ...)  write_sc(x, tmp.dir = NULL, solver = NULL, ...)  write.sc(x, tmp.dir = NULL, solver = NULL, ...)"},{"path":"https://energyRt.org/reference/write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write scenario object as a Python, Julia, GAMS, or MathProg script with data files to a directory — write_script","text":"scen scenario object, must interpolated tmp.dir character, path solver list character solver specification. ... additional solver parameters","code":""},{"path":[]},{"path":"https://energyRt.org/reference/yday2YDAY.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert year-days to YDAY set 'dNNN' — yday2YDAY","title":"Convert year-days to YDAY set 'dNNN' — yday2YDAY","text":"Convert year-days YDAY set 'dNNN'","code":""},{"path":"https://energyRt.org/reference/yday2YDAY.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert year-days to YDAY set 'dNNN' — yday2YDAY","text":"","code":"yday2YDAY(x, width = 3, prefix = \"d\", flag = \"0\")"},{"path":"https://energyRt.org/reference/yday2YDAY.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert year-days to YDAY set 'dNNN' — yday2YDAY","text":"flag","code":""},{"path":"https://energyRt.org/news/index.html","id":"energyrt-0504-dev","dir":"Changelog","previous_headings":"","what":"energyRt 0.50.4-dev","title":"energyRt 0.50.4-dev","text":"Documentation classes progress (~70% docs completed). Logo-search started! “logo” page added. Website reshaped, added new, populated yet “articles”. !!! Tested!!! Due ongoing changes documentation functions/methods clean-, version may “surprises” - tests progress.","code":""},{"path":"https://energyRt.org/news/index.html","id":"energyrt-0503-dev","dir":"Changelog","previous_headings":"","what":"energyRt 0.50.3-dev","title":"energyRt 0.50.3-dev","text":"Development version preparation CRAN submission. Added NEWS.md file track changes package. Added functions document classes yaml file ‘classes.yaml’. technology-class newTechnology function documented.","code":""}]

