% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class-constraint.R
\docType{class}
\name{class-constraint}
\alias{class-constraint}
\alias{class-summand}
\title{An S4 class to represent a custom constraint.}
\description{
Class \code{constraint} is used to define custom constraints in the optimization problem.
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

Class \code{summand} stores information about linear
terms (a multiplier and a variable)
in the \code{lhs} of the constraint class.
It is auto-created by \code{newConstraint} function
and is not intended to be used directly by the user.
}
\details{
Custom constraints extend the functionality of the model by adding
user-defined constraints to the optimization problem.
If the predefined constraints are not sufficient to describe the problem,
custom constraints can be used to add linear equlity or inequality
constraints to define additional relationships between the variables.
In many cases this can be done without writing constraints in the GAMS,
Julia/JuMP, Python/Pyomo, or GLPK-MathProg languages by using the
\code{constrant} class and the \code{newConstraint} function.
To define a custom constraint with the \code{newConstraint} function,
the user needs to specify the name of the constraint, the type of the
relation (equality, less than or equal, greater than or equal), the
left-hand side (LHS) terms of the statement, and the right-hand side (RHS) value.
The dimension of the constraint is set by the \code{for.each} parameter.
The 'lhs' terms are defined as a list of linear terms (summands).
Each summand consists of a variable, a multiplier, and a set of sets
for which the summand is defined.
}
\section{Slots}{

\describe{
\item{\code{name}}{character. Name of the constraint object, used in sets.}

\item{\code{desc}}{character. Description of the constraint.}

\item{\code{eq}}{character. Type of the relation ('==' default, '<=', '>=').}

\item{\code{for.each}}{list. List with sets for combination of which the constraint is created.}

\item{\code{rhs}}{data.frame. Named list or data frame with numeric values for each constraint. The dimensions of the data frame should match the dimensions of the sets in the \code{for.each} slot.}

\item{\code{defVal}}{numeric. The default value for the rhs. It is recommended to set the default value for the rhs of every constraint to avoid unexpected behavior. If not specified, the default value is 0, and the warning is issued.}

\item{\code{interpolation}}{character. Interpolation rule for the constraint. Recognized values, any combination of "back", "inter", "forth", e.g., "back.inter" or "forth.inter", indicating the direction of interpolation. The default value is "inter", meaning that the interpolation is done for years between the specified values. The "back" and "forth" values induce backward and forward interpolation of the \code{rhs} values, respectively.}

\item{\code{lhs}}{list. List of summands for the left-hand-side of the equation. This slot is created automatically from all named of unnamed lists passed to the \code{newConstraint} function, except for the named arguments.}

\item{\code{misc}}{list. Any additional information or parameters to store in the constraint object.}

\item{\code{desc}}{character. Description of the linear term.}

\item{\code{variable}}{character. Name of the variable.}

\item{\code{for.sum}}{list. List of sets for which the summand will be created.}

\item{\code{mult}}{data.frame. Multiplying coefficients to the variable for each set in the \code{for.sum} slot.}

\item{\code{defVal}}{numeric. Default value for the summand.}

\item{\code{misc}}{list. Additional information.}
}}

\seealso{
Other class constraint policy: 
\code{\link{class-costs}},
\code{\link{newConstraint}()},
\code{\link{newCosts}()},
\code{\link{newSubsidy}()},
\code{\link{newTax}()},
\code{\link{subsidy-class}},
\code{\link{tax-class}}

Other class constraint: 
\code{\link{newConstraint}()}
}
\concept{class constraint}
\concept{class constraint policy}
